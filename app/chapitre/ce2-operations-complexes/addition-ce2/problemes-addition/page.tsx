'use client';

import React, { useState, useRef, useEffect } from 'react';
import Link from 'next/link';
import { ArrowLeft, Play, Book, Target, CheckCircle, XCircle, Trophy, Star } from 'lucide-react';

import { Suspense } from 'react';
import dynamic from 'next/dynamic';

// Lazy load des sections principales
const ProblemeSection = dynamic(() => import('./components/ProblemeSection'), {
  loading: () => <div>Chargement des probl√®mes...</div>,
  ssr: false
});

const ResolutionSection = dynamic(() => import('./components/ResolutionSection'), {
  loading: () => <div>Chargement des r√©solutions...</div>,
  ssr: false
});

export default function ProblemesAdditionCE2() {
  // √âtats pour la navigation et les animations
  const [showExercises, setShowExercises] = useState(false);
  const [hasStarted, setHasStarted] = useState(false);
  const [isPlayingVocal, setIsPlayingVocal] = useState(false);
  const [isAnimationRunning, setIsAnimationRunning] = useState(false);
  const [highlightedElement, setHighlightedElement] = useState<string | null>(null);
  const [animatingStep, setAnimatingStep] = useState<string | null>(null);
  const [currentExample, setCurrentExample] = useState<number | null>(null);
  const [highlightedExamples, setHighlightedExamples] = useState<number[]>([]);
  const [highlightNumbersInStory, setHighlightNumbersInStory] = useState(false);

  // √âtats pour les exercices
  const [currentExercise, setCurrentExercise] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  const [score, setScore] = useState(0);
  const [showCompletionModal, setShowCompletionModal] = useState(false);
  const [showExerciseAnimation, setShowExerciseAnimation] = useState(false);
  const [exerciseAnimationStep, setExerciseAnimationStep] = useState<string | null>(null);
  const [exercisesHasStarted, setExercisesHasStarted] = useState(false);
  const [exercisesIsPlayingVocal, setExercisesIsPlayingVocal] = useState(false);
  
  // √âtats pour Steve
  const [samSizeExpanded, setSamSizeExpanded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [highlightCourseButton, setHighlightCourseButton] = useState(false);
  const [highlightExerciseButton, setHighlightExerciseButton] = useState(false);

  // Refs pour g√©rer l'audio
  const stopSignalRef = useRef(false);
  const currentAudioRef = useRef<SpeechSynthesisUtterance | null>(null);

  // Refs pour les sections
  const introSectionRef = useRef<HTMLDivElement>(null);
  const methodSectionRef = useRef<HTMLDivElement>(null);
  const examplesSectionRef = useRef<HTMLDivElement>(null);
  const exerciseTabRef = useRef<HTMLButtonElement>(null);

  // Donn√©es des probl√®mes avec animations - NIVEAU CE2 (nombres plus grands, contextes vari√©s)
  const problemExamples = [
    {
      id: 'marche',
      title: 'Le march√© aux fruits',
      story: 'Au march√©, un marchand dispose de 678 pommes et 459 poires sur son √©tal. Combien de fruits propose-t-il √† la vente ?',
      first: 678,
      second: 459,
      result: 1137,
      item: 'üçé',
      color1: 'text-red-600',
      color2: 'text-green-600'
    },
    {
      id: 'cinema',
      title: 'Le grand cin√©ma',
      story: 'Dans un grand cin√©ma, la salle bleue accueille 875 spectateurs et la salle rouge 548 spectateurs. Combien y a-t-il de spectateurs en tout ?',
      first: 875,
      second: 548,
      result: 1423,
      item: 'üé¨',
      color1: 'text-blue-600',
      color2: 'text-red-600'
    },
    {
      id: 'stade',
      title: 'Le match de football',
      story: 'Pour la finale de la coupe, le stade accueille 967 supporters de l\'√©quipe bleue et 856 supporters de l\'√©quipe rouge. Combien y a-t-il de supporters dans le stade ?',
      first: 967,
      second: 856,
      result: 1823,
      item: '‚öΩ',
      color1: 'text-blue-600',
      color2: 'text-red-600'
    },
    {
      id: 'timbres',
      title: 'La collection de timbres',
      story: 'Un collectionneur passionn√© poss√®de 784 timbres d\'Europe dans son album rouge et 695 timbres d\'Asie dans son album bleu. Combien poss√®de-t-il de timbres au total dans ces deux albums ?',
      first: 784,
      second: 695,
      result: 1479,
      item: 'üì¨',
      color1: 'text-amber-600',
      color2: 'text-indigo-600'
    },
    {
      id: 'aquarium',
      title: 'L\'aquarium g√©ant',
      story: 'Dans le grand aquarium du mus√©e, il y a 583 poissons tropicaux. Le directeur commande 647 nouveaux poissons, mais 100 d\'entre eux iront dans un autre bassin. Combien y aura-t-il de poissons dans le grand aquarium ?',
      first: 583,
      second: 547,
      result: 1130,
      item: 'üê†',
      color1: 'text-cyan-600',
      color2: 'text-blue-600'
    },
    {
      id: 'course',
      title: 'La course de v√©los',
      story: 'Pour une course cycliste, 437 coureurs sont inscrits. Le jour de la course, 128 coureurs abandonnent √† cause de la pluie, mais 246 nouveaux participants s\'inscrivent √† la derni√®re minute. Combien de cyclistes prennent le d√©part ?',
      first: 437,
      second: 246,
      result: 683,
      item: 'üö≤',
      color1: 'text-yellow-600',
      color2: 'text-green-600'
    },
    {
      id: 'bibliotheque',
      title: 'Les livres de la classe',
      story: 'Sur l\'√©tag√®re de la classe, il y a 329 livres de contes et 287 livres d\'images. Combien de livres y a-t-il ?',
      first: 329,
      second: 287,
      result: 616,
      item: 'üìö',
      color1: 'text-purple-600',
      color2: 'text-blue-600'
    },
    {
      id: 'recreation',
      title: 'Les billes de Paul',
      story: 'Paul collectionne les billes depuis qu\'il a 6 ans. Il poss√®de 411 billes bleues. Son ami Lucas a 128 billes de plus que Paul. Combien de billes ont-ils √† eux deux ?',
      first: 411,
      second: 950,
      result: 1361,
      item: '‚ö™',
      color1: 'text-blue-600',
      color2: 'text-red-600'
    },
    {
      id: 'anniversaire',
      title: 'Les invit√©s d\'Emma',
      story: 'Emma organise une grande f√™te d\'anniversaire. Sa maman a pr√©par√© des invitations : 512 pour les filles de l\'√©cole et 348 pour les gar√ßons. Quel est le nombre total d\'invitations pr√©par√©es ?',
      first: 512,
      second: 348,
      result: 860,
      item: 'üéâ',
      color1: 'text-pink-600',
      color2: 'text-blue-600'
    },
    {
      id: 'magasin',
      title: 'Les jouets du magasin',
      story: 'Dans un grand magasin de jouets, le rayon poup√©es compte 347 poup√©es classiques. Le g√©rant vient de recevoir 285 poup√©es de plus que ce qu\'il y avait d√©j√†. Combien de nouvelles poup√©es a-t-il re√ßues ?',
      first: 347,
      second: 285,
      result: 632,
      item: 'üéé',
      color1: 'text-pink-600',
      color2: 'text-purple-600'
    },
    {
      id: 'ferme',
      title: 'Les graines du fermier',
      story: 'Un fermier exp√©riment√© pr√©pare ses semis pour le printemps. Il a d√©j√† plant√© 458 graines de tournesol hier matin. Aujourd\'hui, il souhaite planter 367 graines suppl√©mentaires dans un autre champ. Au final, combien de graines de tournesol aura-t-il plant√©es en tout ?',
      first: 458,
      second: 367,
      result: 825,
      item: 'üåª',
      color1: 'text-yellow-600',
      color2: 'text-green-600'
    }
  ];

  // 22 Exercices progressifs CE2 : simple ‚Üí nombres √† 2-4 chiffres avec retenues ‚Üí jusqu'√† 10000+
  const exercises = [
    // NIVEAU 1 : Probl√®mes avec nombres √† 2 chiffres (50-200)
    {
      story: 'Une boulangerie a vendu 78 croissants le matin et 95 l\'apr√®s-midi. Combien de croissants ont √©t√© vendus en tout ?',
      question: 'Combien de croissants ont √©t√© vendus en tout ?',
      answer: 173,
      visual: 'ü•ê',
      first: 78,
      second: 95,
      item: 'ü•ê',
      color1: 'text-yellow-600',
      color2: 'text-orange-600'
    },
    {
      story: 'Dans une biblioth√®que municipale, au rayon jeunesse, on compte 86 romans d\'aventures sur les √©tag√®res du haut, ainsi que 67 documentaires sur les √©tag√®res du bas. De combien de livres dispose ce rayon en tout ?',
      question: 'De combien de livres dispose ce rayon en tout ?',
      answer: 153,
      visual: 'üìö',
      first: 86,
      second: 67,
      item: 'üìö',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    
    // NIVEAU 2 : Probl√®mes avec calcul interm√©diaire
    {
      story: 'Julien poss√®de 123 billes dans sa collection. Ethan, son meilleur ami, en a 198 de plus que lui. Combien ont-ils de billes √† eux deux ?',
      question: 'Combien ont-ils de billes √† eux deux ?',
      answer: 444,
      visual: 'üîÆ',
      first: 123,
      second: 321,
      item: 'üîÆ',
      color1: 'text-blue-600',
      color2: 'text-purple-600'
    },
    {
      story: 'Lors d\'un tournoi de basket, l\'√©quipe des Aigles a marqu√© 167 points pendant les matchs du matin, puis 235 points l\'apr√®s-midi. L\'√©quipe des Lions, quant √† elle, a marqu√© 186 points le matin et 198 points en fin de journ√©e. Quel est le total des points marqu√©s par les deux √©quipes durant toute la journ√©e ?',
      question: 'Quel est le total des points marqu√©s par les deux √©quipes durant toute la journ√©e ?',
      answer: 786,
      visual: 'üèÄ',
      first: 402,
      second: 384,
      item: 'üèÄ',
      color1: 'text-red-600',
      color2: 'text-yellow-600'
    },
    
    // NIVEAU 3 : Probl√®mes avec donn√©es inutiles et grands nombres (200-400)
    {
      story: 'Dans une grande √©cole de 3 √©tages, la classe de CE2 organise une collecte de livres. Le lundi, ils r√©coltent 234 livres. Le mardi matin, avant la r√©cr√©ation de 10h30, ils en r√©coltent encore 156. Combien de livres ont-ils r√©colt√©s en tout ?',
      question: 'Combien de livres ont-ils r√©colt√©s en tout ?',
      answer: 390,
      visual: 'üìö',
      first: 234,
      second: 156,
      item: 'üìö',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    {
      story: 'Pour d√©corer la salle de spectacle, la ma√Ætresse coupe un ruban de 8 m√®tres, puis un autre de 5 m√®tres. Combien de d√©cim√®tres de ruban a-t-elle en tout ?',
      question: 'Combien de d√©cim√®tres de ruban a-t-elle en tout ?',
      answer: 130,
      visual: 'üìè',
      first: 80,
      second: 50,
      item: 'üìè',
      color1: 'text-red-600',
      color2: 'text-blue-600'
    },
    
    // NIVEAU 4 : Probl√®mes complexes avec grands nombres (300-2000)
    {
      story: 'Pour son voyage scolaire, la classe de CE2 prend le train. √Ä l\'aller, ils parcourent 378 kilom√®tres jusqu\'√† Paris, puis 456 kilom√®tres de Paris jusqu\'√† Bordeaux. Au retour, ils font le m√™me trajet en sens inverse. Combien de kilom√®tres parcourent-ils en tout pendant leur voyage ?',
      question: 'Combien de kilom√®tres parcourent-ils en tout pendant leur voyage ?',
      answer: 1668,
      visual: 'üöÇ',
      first: 834,
      second: 834,
      item: 'üöÇ',
      color1: 'text-blue-600',
      color2: 'text-red-600'
    },
    {
      story: 'Sophie collectionne les autocollants. Elle en a 67. Sa s≈ìur en a 49 de plus. Combien d\'autocollants sa s≈ìur a-t-elle ?',
      question: 'Combien d\'autocollants sa s≈ìur a-t-elle ?',
      answer: 116,
      visual: 'üåü',
      first: 67,
      second: 49,
      item: 'üåü',
      color1: 'text-yellow-600',
      color2: 'text-purple-600'
    },
    
    // NIVEAU 5 : Probl√®mes complexes avec grands nombres (100-400)
    {
      story: 'Dans une grande biblioth√®que, l\'√©tage des enfants compte 267 livres d\'histoires. La biblioth√©caire ajoute 189 nouveaux livres, mais elle doit en retirer 45 qui sont ab√Æm√©s. Combien de livres y a-t-il maintenant √† l\'√©tage des enfants ?',
      question: 'Combien de livres y a-t-il maintenant √† l\'√©tage des enfants ?',
      answer: 411,
      visual: 'üìñ',
      first: 267,
      second: 144,
      item: 'üìñ',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    {
      story: 'Un fermier √©l√®ve des moutons. Dans le pr√© du nord, il a 187 brebis. Dans le pr√© du sud, il a 146 agneaux. Si chaque brebis donne naissance √† 2 agneaux au printemps, combien y aura-t-il d\'agneaux dans le pr√© du sud ?',
      question: 'Combien y aura-t-il d\'agneaux dans le pr√© du sud ?',
      answer: 520,
      visual: 'üêë',
      first: 374,
      second: 146,
      item: 'üêë',
      color1: 'text-gray-600',
      color2: 'text-white'
    },
    
    // NIVEAU 6 : Probl√®mes tr√®s complexes avec contexte √©labor√© (200-800)
    {
      story: 'Une √©cole organise une collecte de jouets pour No√´l. Les √©l√®ves de maternelle ont apport√© 245 jouets, les √©l√®ves de CP ont apport√© 189 jouets. Les √©l√®ves de CE2, tr√®s motiv√©s, ont d√©cid√© d\'apporter le double des jouets du CP plus 75 jouets suppl√©mentaires. Combien de jouets les √©l√®ves de CE2 ont-ils apport√©s ?',
      question: 'Combien de jouets les √©l√®ves de CE2 ont-ils apport√©s ?',
      answer: 453,
      visual: 'üß∏',
      first: 378,
      second: 75,
      item: 'üß∏',
      color1: 'text-red-600',
      color2: 'text-blue-600'
    },
    
    // NIVEAU 7 : Probl√®mes √† donn√©es multiples et contexte riche (300-900)
    {
      story: 'Un magasin de sport re√ßoit des √©quipements. Le matin, 278 ballons de foot sont livr√©s. L\'apr√®s-midi, le magasin re√ßoit 156 ballons de basket. Le g√©rant d√©cide de commander 45 ballons de plus que le total des ballons d√©j√† re√ßus. Combien de ballons le g√©rant a-t-il command√©s ?',
      question: 'Combien de ballons le g√©rant a-t-il command√©s ?',
      answer: 479,
      visual: '‚öΩ',
      first: 434,
      second: 45,
      item: '‚öΩ',
      color1: 'text-green-600',
      color2: 'text-orange-600'
    },
    
    // NIVEAU 8 : Probl√®mes de synth√®se avec calculs imbriqu√©s (400-1000)
    {
      story: 'Une p√¢tisserie pr√©pare des g√¢teaux pour un mariage. Le chef p√¢tissier fait 328 petits fours sal√©s. Son apprenti pr√©pare 245 petits fours sucr√©s. Pour √™tre s√ªr d\'en avoir assez, ils d√©cident d\'en faire encore la moiti√© du total d√©j√† pr√©par√©. Combien de petits fours suppl√©mentaires vont-ils pr√©parer ?',
      question: 'Combien de petits fours suppl√©mentaires vont-ils pr√©parer ?',
      answer: 286,
      visual: 'üßÅ',
      first: 573,
      second: 286,
      item: 'üßÅ',
      color1: 'text-pink-600',
      color2: 'text-yellow-600'
    },
    
    // NIVEAU 9 : Probl√®mes de niveau avanc√© avec contexte professionnel (500-1000)
    {
      story: 'Dans une usine de fabrication de puzzles, la machine A produit 456 pi√®ces par heure. La machine B produit 189 pi√®ces de plus par heure que la machine A. Si on fait fonctionner les deux machines pendant 2 heures, combien de pi√®ces produiront-elles ensemble ?',
      question: 'Combien de pi√®ces produiront-elles ensemble en 2 heures ?',
      answer: 2202,
      visual: 'üß©',
      first: 912,
      second: 1290,
      item: 'üß©',
      color1: 'text-blue-600',
      color2: 'text-purple-600'
    },
    
    // NIVEAU 10 : Probl√®mes CE2 avanc√©s avec nombres √† 4 chiffres (1000-5000)
    {
      story: 'Une grande biblioth√®que municipale fait l\'inventaire de ses livres. Dans la section jeunesse, il y a 1247 livres d\'histoires et 1356 livres documentaires. La biblioth√©caire d√©cide d\'acheter autant de nouveaux livres que la somme des livres d\'histoires et documentaires. Combien de nouveaux livres va-t-elle acheter ?',
      question: 'Combien de nouveaux livres va-t-elle acheter ?',
      answer: 2603,
      visual: 'üìö',
      first: 1247,
      second: 1356,
      item: 'üìö',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    
    // NIVEAU 11 : Probl√®mes CE2 complexes avec grands nombres (2000-8000)
    {
      story: 'Un grand magasin organise une vente sp√©ciale. Le premier jour, ils ont vendu 2345 articles. Le deuxi√®me jour, ils en ont vendu 1789 de plus que le premier jour. Le troisi√®me jour, ils d√©cident de commander le triple du nombre d\'articles vendus le premier jour. Combien d\'articles vont-ils commander ?',
      question: 'Combien d\'articles vont-ils commander ?',
      answer: 7035,
      visual: 'üõçÔ∏è',
      first: 2345,
      second: 4690,
      item: 'üõçÔ∏è',
      color1: 'text-red-600',
      color2: 'text-blue-600'
    }
  ];

  // Fonction pour g√©n√©rer un message de correction personnalis√©
  const getPersonalizedFeedback = (exerciseIndex: number, isCorrect: boolean) => {
    const exercise = exercises[exerciseIndex];
    const icon = exercise.visual;
    const story = exercise.story.toLowerCase();
    
    // Analyser l'√©nonc√© pour extraire le contexte
    let subject = '';
    let objectType = '';
    
    if (story.includes('billes')) {
      if (story.includes('julien') && story.includes('ethan')) {
        subject = 'Julien et Ethan ont';
      } else if (story.includes('paul') && story.includes('lucas')) {
        subject = 'Paul et Lucas ont';
      } else {
        subject = 'l\'enfant a';
      }
      objectType = 'billes';
    } else if (story.includes('vaches') && story.includes('moutons')) {
      subject = '';
      objectType = 'animaux';
    } else if (story.includes('pommes')) {
      subject = story.includes('julie') ? 'Julie' : story.includes('maman') ? 'Maman' : 'la personne';
      objectType = 'pommes';
    } else if (story.includes('autocollants')) {
      subject = story.includes('marie') ? 'Marie' : 'l\'enfant';
      objectType = 'autocollants';
    } else if (story.includes('livres')) {
      subject = '';
      objectType = 'livres';
    } else if (story.includes('voitures') || story.includes('camions')) {
      subject = story.includes('tom') ? 'Tom' : 'l\'enfant';
      objectType = story.includes('camions') ? 'v√©hicules' : 'voitures';
    } else if (story.includes('crayons')) {
      subject = story.includes('julie') ? 'Julie' : story.includes('emma') ? 'Emma' : 'l\'enfant';
      objectType = 'crayons';
    } else if (story.includes('cookies') || story.includes('g√¢teaux')) {
      subject = 'Maman';
      objectType = story.includes('cookies') ? 'cookies' : 'g√¢teaux';
    } else if (story.includes('fleurs') || story.includes('tulipes')) {
      subject = 'Papa';
      objectType = 'fleurs';
    } else if (story.includes('√©l√®ves') || story.includes('enfants')) {
      subject = '';
      objectType = '√©l√®ves';
    } else if (story.includes('jouets') || story.includes('peluches') || story.includes('poup√©es')) {
      subject = story.includes('sophie') ? 'Sophie' : 'l\'enfant';
      objectType = 'jouets';
    } else if (story.includes('cartes')) {
      subject = story.includes('lucas') ? 'Lucas' : 'l\'enfant';
      objectType = 'cartes';
    } else if (story.includes('photos')) {
      subject = story.includes('zo√©') ? 'Zo√©' : 'l\'enfant';
      objectType = 'photos';
    } else if (story.includes('badges')) {
      subject = story.includes('thomas') ? 'Thomas' : 'l\'enfant';
      objectType = 'badges';
    } else {
      // Fallback g√©n√©rique
      subject = '';
      objectType = 'objets';
    }
    
    if (isCorrect) {
      const minecraftEncouragements = [
        'Succ√®s d√©bloqu√© !', 
        'Achievement Get !', 
        'Mission accomplie !', 
        'Bloc plac√© avec succ√®s !',
        'Craft r√©ussi !', 
        'Niveau termin√© !', 
        'Objectif atteint !',
        'Qu√™te compl√©t√©e !',
        'Tr√©sor trouv√© !',
        'Construction termin√©e !'
      ];
      
      const minecraftCompliments = [
        'Tu es un vrai constructeur !',
        'Tes comp√©tences progressent !',
        'Tu ma√Ætrises l\'art du calcul !',
        'Tu es pr√™t pour le niveau suivant !',
        'Tes outils math√©matiques sont aff√ªt√©s !',
        'Tu explores bien les nombres !',
        'Ta strat√©gie est excellente !',
        'Tu collectes les bonnes r√©ponses !',
        'Tes bases sont solides !',
        'Tu becomes un expert !'
      ];
      
      const encouragement = minecraftEncouragements[exerciseIndex % minecraftEncouragements.length];
      const compliment = minecraftCompliments[exerciseIndex % minecraftCompliments.length];
      
      let baseMessage = '';
      if (subject && objectType) {
        baseMessage = `${subject} a bien ${exercise.answer} ${objectType} !`;
      } else if (objectType) {
        baseMessage = `Il y a exactement ${exercise.answer} ${objectType} !`;
      } else {
        baseMessage = `Tu as trouv√© ${exercise.answer} !`;
      }
      
      return `üéâ ${encouragement} ${icon} ${baseMessage} ${compliment}`;
    } else {
      // Pour les corrections, rester simple et utiliser les nombres de l'exercice
      return `${icon} ${exercise.first} + ${exercise.second} = ${exercise.answer}`;
    }
  };

  // Fonction pour mettre en √©vidence les nombres dans un texte
  const highlightNumbers = (text: string, isExplicitHighlight = false) => {
    // Remplace les nombres et signes math√©matiques par des spans color√©s (SANS les tirets -)
    return text.split(/(\d+|\+|=)/).map((part, index) => {
      // Si c'est un nombre
      if (/^\d+$/.test(part)) {
        const className = isExplicitHighlight 
          ? "bg-yellow-300 text-yellow-900 px-2 py-1 rounded-lg font-black text-xl mx-1 shadow-lg ring-2 ring-yellow-400 animate-pulse"
          : "bg-blue-200 text-blue-800 px-1.5 py-0.5 rounded-md font-bold mx-0.5 shadow-sm";
        return (
          <span 
            key={index} 
            className={className}
          >
            {part}
          </span>
        );
      }
      // Si c'est un signe math√©matique (+ ou = seulement, PAS -)
      if (/^[\+\=]$/.test(part)) {
        const className = isExplicitHighlight
          ? "bg-orange-300 text-orange-900 px-2 py-1 rounded-lg font-black text-xl mx-1 shadow-lg ring-2 ring-orange-400 animate-pulse"
          : "bg-orange-200 text-orange-800 px-1.5 py-0.5 rounded-md font-bold mx-0.5 shadow-sm";
        return (
          <span 
            key={index} 
            className={className}
          >
            {part}
          </span>
        );
      }
      return part;
    });
  };

  // Fonction pour arr√™ter tous les vocaux et animations
  const stopAllVocalsAndAnimations = () => {
    console.log('üõë Arr√™t de tous les vocaux et animations');
    stopSignalRef.current = true;
    
    // Arr√™ter compl√®tement la synth√®se vocale
    if (speechSynthesis.speaking || speechSynthesis.pending) {
      speechSynthesis.cancel();
      console.log('üîá speechSynthesis.cancel() appel√©');
    }
    
    if (currentAudioRef.current) {
      currentAudioRef.current = null;
    }
    
    setIsPlayingVocal(false);
    setExercisesIsPlayingVocal(false);
    setIsAnimationRunning(false);
    setHighlightedElement(null);
    setAnimatingStep(null);
    setCurrentExample(null);
    setHighlightedExamples([]);
    setHighlightNumbersInStory(false);
    setSamSizeExpanded(false);
    setHighlightCourseButton(false);
    setHighlightExerciseButton(false);
  };

  // Fonction pour faire d√©filer vers une section
  const scrollToSection = (ref: React.RefObject<HTMLElement>) => {
    if (ref.current) {
      ref.current.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center',
        inline: 'nearest'
      });
    }
  };

  // Fonction pour jouer l'audio avec voix f√©minine fran√ßaise
  const playAudio = async (text: string, slowMode = false) => {
    return new Promise<void>((resolve) => {
      if (stopSignalRef.current) {
        resolve();
        return;
      }
      
      setIsPlayingVocal(true);
      const utterance = new SpeechSynthesisUtterance(text);
      
      utterance.lang = 'fr-FR';
      utterance.rate = slowMode ? 0.6 : 0.8;
      utterance.pitch = 1.0;
      utterance.volume = 1.0;

      // S√©lectionner la MEILLEURE voix fran√ßaise f√©minine disponible
      const voices = speechSynthesis.getVoices();
      console.log('Voix disponibles:', voices.map(v => `${v.name} (${v.lang}) ${v.default ? '‚úì' : ''}`));
      
      // Priorit√© aux voix F√âMININES fran√ßaises de qualit√©
      const bestFrenchVoice = voices.find(voice => 
        (voice.lang === 'fr-FR' || voice.lang === 'fr') && 
        (voice.name.toLowerCase().includes('audrey') ||    
         voice.name.toLowerCase().includes('marie') ||     
         voice.name.toLowerCase().includes('am√©lie') ||    
         voice.name.toLowerCase().includes('virginie') ||  
         voice.name.toLowerCase().includes('julie') ||     
         voice.name.toLowerCase().includes('celine') ||    
         voice.name.toLowerCase().includes('l√©a') ||       
         voice.name.toLowerCase().includes('charlotte'))   
      ) || voices.find(voice => 
        (voice.lang === 'fr-FR' || voice.lang === 'fr') && 
        voice.localService                                 
      ) || voices.find(voice => 
        voice.lang === 'fr-FR'                            
      ) || voices.find(voice => 
        voice.lang.startsWith('fr')                       
      );

      if (bestFrenchVoice) {
        utterance.voice = bestFrenchVoice;
        console.log('üé§ Voix s√©lectionn√©e:', bestFrenchVoice.name);
      } else {
        console.warn('‚ö†Ô∏è Aucune voix fran√ßaise trouv√©e');
      }
      
      utterance.onend = () => {
        setIsPlayingVocal(false);
        currentAudioRef.current = null;
        resolve();
      };
      
      utterance.onerror = () => {
        setIsPlayingVocal(false);
        currentAudioRef.current = null;
        resolve();
      };
      
      currentAudioRef.current = utterance;
      speechSynthesis.speak(utterance);
    });
  };

  // Fonction pour attendre
  const wait = async (ms: number) => {
    return new Promise<void>((resolve) => {
      setTimeout(() => {
        if (stopSignalRef.current) {
          resolve();
          return;
        }
        resolve();
      }, ms);
    });
  };

  // Fonction pour lire le texte d'introduction
  const readIntroText = async () => {
    if (isPlayingVocal) return;
    
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsPlayingVocal(true);
    setHighlightedElement('intro');
    
    try {
      await playAudio("Qu'est-ce qu'un probl√®me d'addition ?");
      await wait(800);
      
      if (stopSignalRef.current) return;
      
      await playAudio("Un probl√®me d'addition raconte une histoire avec des nombres. Notre mission est de trouver ces nombres et de les additionner pour r√©pondre √† la question !");
      await wait(1000);
      
    } finally {
      setHighlightedElement(null);
      setIsPlayingVocal(false);
    }
  };

    // Fonction pour faire d√©filer vers un √©l√©ment par ID (pour compatibilit√©)
  const scrollToElement = (elementId: string, position: 'start' | 'center' | 'end' = 'start') => {
    const element = document.getElementById(elementId);
    if (element) {
      const rect = element.getBoundingClientRect();
      const isAlreadyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
      
      // Si l'√©l√©ment n'est pas d√©j√† enti√®rement visible
      if (!isAlreadyVisible) {
        element.scrollIntoView({ 
          behavior: 'smooth', 
          block: position,
          inline: 'nearest'
        });
      }
    }
  };

  // Fonction pour expliquer le chapitre dans le cours avec Sam
  const explainChapterWithSam = async () => {
    if (isPlayingVocal) return;
    
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsPlayingVocal(true);
    setHasStarted(true);
    setSamSizeExpanded(true);
    setHighlightCourseButton(true);
    
    try {
      // Introduction et objectif
      await playAudio("Salut, aventurier ! Bienvenue dans le monde des probl√®mes d'addition !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      await playAudio("Aujourd'hui, tu vas apprendre √† collecter et additionner les nombres comme un vrai explorateur !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation de la premi√®re section
      await playAudio("D'abord, nous allons voir ce qu'est un probl√®me d'addition...");
      if (stopSignalRef.current) return;
      
      // Scroll vers l'introduction et surbrillance
      scrollToSection(introSectionRef);
      setHighlightedElement('intro');
      await wait(500);
      
      await playAudio("Regarde bien cette section ! Tu peux cliquer sur l'ic√¥ne pour voir une animation !");
      if (stopSignalRef.current) return;
      
      // Scroll vers la zone d'animation pour montrer o√π les animations appara√Ætront
      scrollToElement('animation-section');
      await wait(1000);
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation de la m√©thode
      await playAudio("Ensuite, nous verrons la m√©thode en 3 √©tapes...");
      if (stopSignalRef.current) return;
      
      // Scroll vers la m√©thode et surbrillance
      scrollToSection(methodSectionRef);
      setHighlightedElement('method');
      await wait(500);
      
      await playAudio("Voici ma m√©thode de construction ! N'oublie pas de tester l'animation !");
      if (stopSignalRef.current) return;
      
      // Scroll vers la zone d'animation pour montrer o√π se d√©roulera l'animation de la m√©thode
      scrollToElement('animation-section');
      await wait(1000);
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation des exemples
      await playAudio("Et enfin, nous pratiquerons avec plein d'exemples...");
      if (stopSignalRef.current) return;
      
      // Scroll vers les exemples et surbrillance
      scrollToSection(examplesSectionRef);
      setHighlightedElement('examples');
      await wait(500);
      
      await playAudio("Ici tu trouveras 9 exemples avec des animations pour bien comprendre !");
      if (stopSignalRef.current) return;
      
      // Scroll vers la zone d'animation pour montrer o√π se d√©rouleront les exemples anim√©s
      scrollToElement('animation-section');
      await wait(1000);
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Mention de la section exercices
      await playAudio("Quand tu seras pr√™t, tu pourras aussi aller √† la section exercices...");
      if (stopSignalRef.current) return;
      
      // Scroll vers l'onglet exercices et surbrillance
      setHighlightedElement(null);
      setHighlightExerciseButton(true);
      if (exerciseTabRef.current) {
        exerciseTabRef.current.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }
      await wait(500);
      
      await playAudio("L√†-bas, 20 probl√®mes t'attendent pour tester tes nouvelles comp√©tences !");
      if (stopSignalRef.current) return;
      
      await wait(1500);
      if (stopSignalRef.current) return;
      
      // Encouragement final
      await playAudio("Bon courage, jeune aventurier ! Ta qu√™te commence maintenant !");
      if (stopSignalRef.current) return;
      
    } catch (error) {
      console.error('Erreur dans explainChapterWithSam:', error);
    } finally {
      setIsPlayingVocal(false);
      setSamSizeExpanded(false);
      setHighlightCourseButton(false);
      setHighlightExerciseButton(false);
      setHighlightedElement(null);
    }
  };

  // Fonction pour lire l'√©nonc√© de l'exercice actuel
  const readCurrentStory = () => {
    const currentStory = exercises[currentExercise].story;
    const utterance = new SpeechSynthesisUtterance(currentStory);
    utterance.lang = 'fr-FR';
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 1.0;
    
    const voices = speechSynthesis.getVoices();
    const frenchVoice = voices.find(voice => 
      voice.lang === 'fr-FR' && voice.localService === true
    );
    
    if (frenchVoice) {
      utterance.voice = frenchVoice;
    }
    
    speechSynthesis.speak(utterance);
  };

  // Fonction pour lire une √©tape sp√©cifique de la m√©thode
  const readMethodStep = async (step: string) => {
    console.log('üéØ readMethodStep appel√©e pour:', step);
    
    // Arr√™ter tous les autres vocaux en cours
    stopAllVocalsAndAnimations();
    await wait(200);
    stopSignalRef.current = false;
    
    try {
      // Mettre en √©vidence l'√©tape correspondante
      setAnimatingStep(step);
      console.log('üåü Mise en √©vidence de l\'√©tape:', step);
      
      let text = '';
      switch (step) {
        case 'step1':
          text = "Premi√®re √©tape : Je lis le probl√®me et je comprends l'histoire. Je dois bien comprendre ce qui se passe dans l'histoire pour identifier les nombres importants.";
          break;
        case 'step2':
          text = "Deuxi√®me √©tape : Je trouve les deux nombres √† additionner. Je cherche dans l'histoire les quantit√©s que je dois rassembler ou compter ensemble.";
          break;
        case 'step3':
          text = "Troisi√®me √©tape : J'√©cris l'addition et je calcule. Je pose l'op√©ration et je trouve le r√©sultat pour r√©pondre √† la question.";
          break;
        default:
          text = "√âtape de la m√©thode.";
      }
      
      console.log('üîä Lecture du texte:', text);
      await playAudio(text);
      console.log('‚úÖ Lecture termin√©e');
      
      // Attendre un peu puis enlever la mise en √©vidence
      await wait(500);
      setAnimatingStep(null);
      console.log('üéØ Mise en √©vidence supprim√©e');
      
    } catch (error) {
      console.error('Erreur lors de la lecture de l\'√©tape:', error);
      setAnimatingStep(null);
    }
  };

  // Fonction pour lire la section m√©thode
  const readSectionMethod = async () => {
    console.log('üéØ readSectionMethod appel√©e');
    
    // Arr√™ter tous les autres vocaux en cours
    stopAllVocalsAndAnimations();
    await wait(200);
    stopSignalRef.current = false;
    
    try {
      // Mettre en √©vidence la section m√©thode
      setHighlightedElement('method');
      scrollToSection(methodSectionRef);
      
      // Introduction g√©n√©rale
      await playAudio("Ma m√©thode en 3 √©tapes pour r√©soudre un probl√®me d'addition.");
      if (stopSignalRef.current) return;
      
      await wait(800);
      if (stopSignalRef.current) return;
      
      // √âtape 1 avec mise en √©vidence
      setAnimatingStep('step1');
      await playAudio("Premi√®re √©tape : je lis le probl√®me et je comprends l'histoire. Je dois bien comprendre ce qui se passe dans l'histoire pour identifier les nombres importants.");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      // √âtape 2 avec mise en √©vidence  
      setAnimatingStep('step2');
      await playAudio("Deuxi√®me √©tape : je trouve les deux nombres √† additionner. Je cherche dans l'histoire les quantit√©s que je dois rassembler ou compter ensemble.");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      // √âtape 3 avec mise en √©vidence
      setAnimatingStep('step3');
      await playAudio("Troisi√®me √©tape : j'√©cris l'addition et je calcule le r√©sultat. Je pose l'op√©ration et je trouve le r√©sultat pour r√©pondre √† la question.");
      if (stopSignalRef.current) return;
      
      await wait(500);
      if (stopSignalRef.current) return;
      
      console.log('‚úÖ Lecture termin√©e');
      
    } catch (error) {
      console.error('Erreur lors de la lecture de la m√©thode:', error);
    } finally {
      // Enlever toutes les mises en √©vidence
      setHighlightedElement(null);
      setAnimatingStep(null);
    }
  };

  // Fonction pour expliquer les exercices avec Sam
  const explainExercisesWithSam = async () => {
    if (exercisesIsPlayingVocal) return;
    
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setExercisesIsPlayingVocal(true);
    setExercisesHasStarted(true);
    setSamSizeExpanded(true);
    setHighlightExerciseButton(true);
    
    try {
      await playAudio("Salut, aventurier ! C'est l'heure de t'entra√Æner avec les exercices !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      await playAudio("Tu vas r√©soudre 20 probl√®mes d'addition diff√©rents, c'est parti pour l'aventure !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence le bouton "Lire l'√©nonc√©"
      setHighlightedElement('read-story-button');
      await playAudio("Pour chaque exercice, tu peux lire l'√©nonc√© en cliquant sur le bouton 'Lire l'√©nonc√©' !");
      if (stopSignalRef.current) return;
      
      await wait(1500);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence la zone de r√©ponse
      setHighlightedElement('answer-input');
      await playAudio("Ensuite, tu saisis ta r√©ponse dans la zone de r√©ponse !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence le bouton V√©rifier
      setHighlightedElement('validate-button');
      await playAudio("Et pour finir, tu appuies sur le bouton 'V√©rifier' pour v√©rifier ta r√©ponse !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      setHighlightedElement(null);
      await playAudio("Si tu te trompes, je t'aiderai avec une animation pour comprendre ! En avant, jeune aventurier !");
      if (stopSignalRef.current) return;
      
      // Scroll vers la zone d'animation pour montrer o√π appara√Ætront les animations d'aide
      scrollToElement('animation-section');
      await wait(1000);
      
    } catch (error) {
      console.error('Erreur dans explainExercisesWithSam:', error);
    } finally {
      setExercisesIsPlayingVocal(false);
      setSamSizeExpanded(false);
      setHighlightExerciseButton(false);
      setHighlightedElement(null);
    }
  };

  // Fonction pour expliquer le chapitre principal
  const explainChapter = async () => {
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsAnimationRunning(true);
    setHasStarted(true);

    try {
      // Introduction
      setHighlightedElement('intro');
      scrollToElement('intro-section');
      await playAudio("Bonjour ! Aujourd'hui, nous allons apprendre √† r√©soudre des probl√®mes d'addition. C'est tr√®s important de savoir transformer une histoire en calcul !");
      await wait(500);

      if (stopSignalRef.current) return;

      // M√©thode
      setHighlightedElement('method');
      scrollToElement('method-section');
      await playAudio("Pour r√©soudre un probl√®me d'addition, il faut suivre 3 √©tapes importantes :");
      await wait(300);

      // √âtape 1
      setAnimatingStep('step1');
      await playAudio("Premi√®re √©tape : je lis le probl√®me et je comprends l'histoire.");
      await wait(500);

      if (stopSignalRef.current) return;

      // √âtape 2
      setAnimatingStep('step2');
      await playAudio("Deuxi√®me √©tape : je trouve les deux nombres √† additionner dans l'histoire.");
      await wait(500);

      if (stopSignalRef.current) return;

      // D√©monstration du soulignage des nombres
      setHighlightNumbersInStory(true);
      await playAudio("Regardez ! Je souligne tous les nombres que je trouve pour les rep√©rer facilement !");
      await wait(1000);

      if (stopSignalRef.current) return;

      await playAudio("Voyez-vous comme les nombres ressortent bien ? C'est plus facile de les voir maintenant !");
      await wait(1000);

      if (stopSignalRef.current) return;

      setHighlightNumbersInStory(false);
      await wait(300);

      // √âtape 3
      setAnimatingStep('step3');
      await playAudio("Troisi√®me √©tape : j'√©cris l'addition et je calcule le r√©sultat !");
      await wait(800);

      if (stopSignalRef.current) return;

      // Transition vers les exemples
      setHighlightedElement('examples');
      scrollToElement('examples-section');
      await playAudio("Maintenant, regardons des exemples ensemble !");
      await wait(300);

      if (stopSignalRef.current) return;

      // Illuminer quelques exemples pendant l'explication  
      setHighlightedExamples([0, 2, 4]); // Illuminer bonbons, cour, march√©
      await playAudio("Tu peux choisir celui que tu pr√©f√®res pour voir l'animation d√©taill√©e !");
      
      // Scroll vers la zone d'animation pour montrer o√π les animations d√©taill√©es appara√Ætront
      scrollToElement('animation-section');
      await wait(1000);

      if (stopSignalRef.current) return;

      // Changer d'exemples illumin√©s pour montrer la vari√©t√©
      setHighlightedExamples([1, 5, 8]); // Illuminer voitures, canards, boulangerie
      await wait(800);

      // Arr√™ter l'illumination
      setHighlightedExamples([]);

    } finally {
      setHighlightedElement(null);
      setAnimatingStep(null);
      setHighlightNumbersInStory(false);
      setIsAnimationRunning(false);
    }
  };

  // Fonction pour expliquer un exemple sp√©cifique
  const explainSpecificExample = async (index: number) => {
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsAnimationRunning(true);
    
    const example = problemExamples[index];
    setCurrentExample(index);

    // Attendre un court instant pour que l'interface se mette √† jour
    await wait(300);
    
    // Scroll vers la zone d'animation maintenant que l'exemple est affich√©
    scrollToElement('animation-section', 'start');
    await wait(500);

    try {
      // Lecture du probl√®me
      setHighlightedElement('story');
      await playAudio(example.story);
      await wait(800);

      if (stopSignalRef.current) return;

      // Identifier les nombres avec plus de d√©tails selon le contexte
      setAnimatingStep('identify');
      setHighlightNumbersInStory(true);
      
      if (example.id === 'aquarium') {
        await playAudio("Je commence par rep√©rer les nombres importants dans l'histoire.");
        await wait(700);
        await playAudio(`Il y a d'abord ${example.first} poissons dans l'aquarium.`);
        await wait(700);
        await playAudio(`Le directeur commande 647 poissons, mais attention : 100 iront dans un autre bassin.`);
        await wait(700);
        await playAudio(`Donc sur les 647 poissons command√©s, nous n'ajouterons que ${example.second} poissons dans le grand aquarium.`);
      } else if (example.id === 'marche') {
        await playAudio("Regardons les diff√©rents fruits sur l'√©tal.");
        await wait(700);
        await playAudio(`Il y a ${example.first} pommes d'un c√¥t√©.`);
        await wait(700);
        await playAudio(`Et ${example.second} poires de l'autre c√¥t√©.`);
        await wait(700);
        await playAudio("Pour trouver le total des fruits, nous devons additionner ces deux nombres.");
      } else {
        await playAudio("Je souligne tous les nombres que je vois dans l'histoire !");
        await wait(700);
        await playAudio(`J'ai trouv√© ${example.first} et ${example.second}. Ce sont mes deux nombres importants !`);
      }
      await wait(1000);

      if (stopSignalRef.current) return;

      setHighlightNumbersInStory(false);
      await wait(300);

      // Montrer les groupes avec plus d'explications
      setAnimatingStep('group1');
      if (example.first > 100) {
        await playAudio(`Pour le premier groupe, nous avons ${example.first} ${example.item}. C'est un grand nombre, il faudra bien poser l'op√©ration.`);
      } else {
        await playAudio(`Voici le premier groupe avec ${example.first} ${example.item}.`);
      }
      await wait(1000);

      if (stopSignalRef.current) return;

      setAnimatingStep('group2');
      if (example.second > 100) {
        await playAudio(`Pour le deuxi√®me groupe, nous avons ${example.second} ${example.item}. L√† aussi, c'est un grand nombre.`);
      } else {
        await playAudio(`Et voici le deuxi√®me groupe avec ${example.second} ${example.item}.`);
      }
      await wait(1000);

      if (stopSignalRef.current) return;

      // Calculs interm√©diaires si n√©cessaire
      if (example.id === 'aquarium') {
        setAnimatingStep('intermediate');
        scrollToElement('animation-section', 'start');
        await playAudio("D'abord, calculons combien de nouveaux poissons iront dans le grand aquarium.");
        await wait(700);
        await playAudio("Sur les 647 poissons command√©s, 100 iront dans un autre bassin.");
        await wait(700);
        await playAudio("647 moins 100 √©gale 547 poissons pour le grand aquarium.");
        await wait(1000);
      }

      // Calcul principal avec plus de d√©tails
      setAnimatingStep('calculation');
      scrollToElement('animation-section', 'start');
      if (example.id === 'aquarium') {
        await playAudio(`Maintenant, je peux additionner les ${example.first} poissons d√©j√† pr√©sents avec les ${example.second} nouveaux poissons.`);
        await wait(700);
      }

      if (example.first > 100 || example.second > 100) {
        await playAudio("Je vais poser l'op√©ration pour bien aligner les chiffres.");
        await wait(700);
        await playAudio(`Je pose ${example.first} en haut et ${example.second} en dessous.`);
        await wait(700);
        await playAudio("Je commence par les unit√©s, en bas de la colonne de droite.");
        await wait(700);
        await playAudio("Puis je passe aux dizaines, dans la colonne du milieu.");
        await wait(700);
        await playAudio("Et enfin les centaines, dans la colonne de gauche.");
        await wait(700);
        await playAudio(`J'obtiens ${example.result} comme r√©sultat.`);
      } else {
        await playAudio(`Je fais l'addition : ${example.first} plus ${example.second} √©gale ${example.result}.`);
      }
      
      scrollToElement('animation-section');
      await wait(800);

      if (stopSignalRef.current) return;

      // R√©sultat final avec contexte
      setAnimatingStep('result');
      scrollToElement('animation-section', 'start');
      if (example.id === 'aquarium') {
        await playAudio(`Il y aura donc ${example.result} poissons dans le grand aquarium apr√®s avoir ajout√© les nouveaux poissons !`);
      } else if (example.id === 'marche') {
        await playAudio(`Au total, le marchand propose ${example.result} fruits √† la vente sur son √©tal !`);
      } else {
        await playAudio(`La r√©ponse est ${example.result} ${example.item} ! Excellent !`);
      }
      await wait(1000);

    } finally {
      setHighlightedElement(null);
      setAnimatingStep(null);
      setCurrentExample(null);
      setHighlightNumbersInStory(false);
      setIsAnimationRunning(false);
    }
  };

  // Fonction pour les exercices
  const checkAnswer = () => {
    const userNum = parseInt(userAnswer);
    const correct = userNum === exercises[currentExercise].answer;
    setIsCorrect(correct);
    
    if (correct) {
      setScore(score + 1);
      
      // Vocal d'encouragement Minecraft
      setTimeout(() => {
        const minecraftVocalEncouragements = [
          'Succ√®s d√©bloqu√© ! Achievement Get !',
          'Mission accomplie ! Tu es un vrai constructeur !',
          'Craft r√©ussi ! Tes comp√©tences progressent !',
          'Niveau termin√© ! Tu es pr√™t pour le suivant !',
          'Objectif atteint ! Tu ma√Ætrises l\'art du calcul !',
          'Qu√™te compl√©t√©e ! Tu explores bien les nombres !',
          'Tr√©sor trouv√© ! Ta strat√©gie est excellente !',
          'Construction termin√©e ! Tes bases sont solides !',
          'Bloc plac√© avec succ√®s ! Tu collectes les bonnes r√©ponses !',
          'Achievement d√©bloqu√© ! Tu deviens un expert !'
        ];
        
        const encouragement = minecraftVocalEncouragements[currentExercise % minecraftVocalEncouragements.length];
        
        const utterance = new SpeechSynthesisUtterance(encouragement);
        utterance.lang = 'fr-FR';
        utterance.rate = 1.0;
        utterance.pitch = 1.2; // Voix plus enjou√©e
        utterance.volume = 1.0;
        
        const voices = speechSynthesis.getVoices();
        const frenchVoice = voices.find(voice => 
          voice.lang === 'fr-FR' && voice.localService === true
        );
        
        if (frenchVoice) {
          utterance.voice = frenchVoice;
        }
        
        speechSynthesis.speak(utterance);
      }, 200);
      
      // Scroll vers le message de f√©licitations
      setTimeout(() => {
        const correctionElement = document.getElementById('exercise-correction');
        if (correctionElement) {
          correctionElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
          });
        }
      }, 300);
      
      // Passer automatiquement au suivant apr√®s 3 secondes (plus long pour laisser le temps au vocal)
      setTimeout(() => {
        nextExercise();
      }, 3000);
    } else {
      // D√©clencher la correction vocale automatique et l'animation visuelle
      setShowExerciseAnimation(true);
      quickVocalCorrection();
      animateExerciseCorrection();
    }
  };

  // Fonction pour correction vocale automatique
  const quickVocalCorrection = async () => {
    const exercise = exercises[currentExercise];
    
    // Utiliser les valeurs first et second de l'exercice
    const first = exercise.first;
    const second = exercise.second;
    const result = exercise.answer;

    // Scroll vers la zone de correction
    setTimeout(() => {
      const correctionElement = document.getElementById('exercise-correction');
      if (correctionElement) {
        correctionElement.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }
    }, 300);

    // Fonction audio avec vitesse lente pour la correction
    const quickAudio = (text: string) => {
      return new Promise<void>((resolve) => {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'fr-FR';
        utterance.rate = 0.8; // Vitesse plus lente pour la correction
        utterance.pitch = 1.0;
        utterance.volume = 1.0;
        
        const voices = speechSynthesis.getVoices();
        const frenchVoice = voices.find(voice => 
          voice.lang === 'fr-FR' && voice.localService === true
        );
        
        if (frenchVoice) {
          utterance.voice = frenchVoice;
        }
        
        utterance.onend = () => resolve();
        utterance.onerror = () => resolve();
        speechSynthesis.speak(utterance);
      });
    };

    try {
      // Cr√©er une explication personnalis√©e bas√©e sur le contexte du probl√®me CE2
      const getPersonalizedExplanation = () => {
        const story = exercise.story.toLowerCase();
        let context = '';
        
        if (story.includes('autocollant')) {
          context = `Il y a ${first} autocollants et ${second} autocollants`;
        } else if (story.includes('crayon')) {
          context = `Il y a ${first} crayons et ${second} crayons`;
        } else if (story.includes('voiture')) {
          context = `Il y a ${first} voitures et ${second} voitures`;
        } else if (story.includes('pomme')) {
          context = `Il y a ${first} pommes et ${second} pommes`;
        } else if (story.includes('fille') || story.includes('gar√ßon') || story.includes('√©l√®ve')) {
          context = `Il y a ${first} enfants et ${second} enfants`;
        } else if (story.includes('bille')) {
          context = `Il y a ${first} billes et ${second} billes`;
        } else if (story.includes('tulipe') || story.includes('fleur')) {
          context = `Il y a ${first} tulipes et ${second} tulipes`;
        } else if (story.includes('livre')) {
          context = `Il y a ${first} livres et ${second} livres`;
        } else if (story.includes('peluche') || story.includes('poup√©e') || story.includes('jouet')) {
          context = `Il y a ${first} jouets et ${second} jouets`;
        } else if (story.includes('carte')) {
          context = `Il y a ${first} cartes et ${second} cartes`;
        } else if (story.includes('pi√®ce') || story.includes('puzzle')) {
          context = `Il y a ${first} pi√®ces et ${second} pi√®ces`;
        } else if (story.includes('graine')) {
          context = `Il y a ${first} graines et ${second} graines`;
        } else if (story.includes('capsule')) {
          context = `Il y a ${first} capsules et ${second} capsules`;
        } else if (story.includes('√©toile')) {
          context = `Il y a ${first} √©toiles et ${second} √©toiles`;
        } else if (story.includes('coquillage')) {
          context = `Il y a ${first} coquillages et ${second} coquillages`;
        } else if (story.includes('timbre')) {
          context = `Il y a ${first} timbres et ${second} timbres`;
        } else if (story.includes('g√¢teau')) {
          context = `Il y a ${first} g√¢teaux et ${second} g√¢teaux`;
        } else if (story.includes('bloc')) {
          context = `Il y a ${first} blocs et ${second} blocs`;
        } else if (story.includes('photo')) {
          context = `Il y a ${first} photos et ${second} photos`;
        } else if (story.includes('badge')) {
          context = `Il y a ${first} badges et ${second} badges`;
        } else if (story.includes('bonbon')) {
          context = `Il y a ${first} bonbons et ${second} bonbons`;
        } else if (story.includes('chat') || story.includes('chaton')) {
          context = `Il y a ${first} chatons et ${second} chatons`;
        } else if (story.includes('cookie')) {
          context = `Il y a ${first} cookies et ${second} cookies`;
        } else {
          // Fallback g√©n√©rique
          context = `Les nombres sont ${first} et ${second}`;
        }
        
        return context;
      };
      
      // Correction avec mise en √©vidence et vitesse lente
      setExerciseAnimationStep('highlight-numbers');
      await quickAudio(getPersonalizedExplanation());
      await wait(700);
      
      setExerciseAnimationStep('show-calculation');
      if (exercise.story.includes('Julien') && exercise.story.includes('Ethan')) {
        await quickAudio(`Attention ! Ethan a 198 billes de plus que Julien. Julien a 123 billes, donc Ethan a 123 plus 198, ce qui fait 321 billes.`);
        await wait(1000);
        await quickAudio(`Maintenant que nous savons qu'Ethan a 321 billes, nous pouvons calculer le total : Julien a 123 billes, plus les 321 billes d'Ethan, ce qui fait ${result} billes en tout.`);
      } else if (exercise.story.includes('Sophie') && exercise.story.includes('autocollants')) {
        await quickAudio(`Attention ! La s≈ìur de Sophie a 49 autocollants de plus que Sophie. Sophie a 67 autocollants, donc sa s≈ìur a 67 plus 49, ce qui fait ${result} autocollants.`);
      } else if (exercise.story.includes('brebis') && exercise.story.includes('agneaux')) {
        await quickAudio(`Commen√ßons par calculer combien de nouveaux agneaux vont na√Ætre. Chaque brebis va avoir 2 agneaux.`);
        await wait(700);
        await quickAudio(`Il y a 187 brebis, donc nous devons multiplier 187 par 2. Cela fait 374 nouveaux agneaux qui vont na√Ætre.`);
        await wait(1000);
        await quickAudio(`Maintenant, il faut ajouter les 146 agneaux qui sont d√©j√† pr√©sents dans le pr√© du sud.`);
        await wait(700);
        await quickAudio(`374 nouveaux agneaux plus 146 agneaux d√©j√† pr√©sents, cela fait ${result} agneaux en tout.`);
      } else if (exercise.story.includes('poup√©es') && exercise.story.includes('plus que')) {
        await quickAudio(`Attention ! Le g√©rant re√ßoit 285 poup√©es de plus que les 347 poup√©es d√©j√† pr√©sentes. Il re√ßoit donc 347 plus 285, ce qui fait ${result} nouvelles poup√©es.`);
      } else if (exercise.story.includes('biblioth√®que') && exercise.story.includes('ab√Æm√©s')) {
        await quickAudio(`Regardons d'abord combien il y a de livres au d√©part : 267 livres d'histoires.`);
        await wait(700);
        await quickAudio(`La biblioth√©caire ajoute 189 nouveaux livres, ce qui fait 267 plus 189, soit 456 livres.`);
        await wait(1000);
        await quickAudio(`Mais attention, elle doit retirer 45 livres qui sont ab√Æm√©s.`);
        await wait(700);
        await quickAudio(`456 moins 45 √©gale ${result} livres. C'est le nombre final de livres √† l'√©tage des enfants.`);
      } else if (exercise.story.includes('tournoi de basket')) {
        await quickAudio(`Calculons d'abord les points de chaque √©quipe. Les Aigles ont marqu√© 167 points le matin plus 235 points l'apr√®s-midi, ce qui fait 402 points.`);
        await wait(1000);
        await quickAudio(`Les Lions ont marqu√© 186 points le matin plus 198 points l'apr√®s-midi, ce qui fait 384 points.`);
        await wait(1000);
        await quickAudio(`Au total, les deux √©quipes ont marqu√© 402 plus 384, ce qui fait ${result} points.`);
      } else {
        await quickAudio(`${first} plus ${second} √©gale ${result}`);
      }
      
      // Scroll vers la zone d'animation de l'exercice pour voir l'addition pos√©e
      scrollToElement('exercise-correction');
      await wait(700);
      
      setExerciseAnimationStep('show-result');
      await quickAudio(`La bonne r√©ponse est ${result} !`);
      await wait(1000);
      
      // Ne pas r√©initialiser l'animation pour qu'elle reste visible
      
    } catch (error) {
      console.error('Erreur dans quickVocalCorrection:', error);
    }
  };

  // Fonction pour animer la correction de l'exercice
  const animateExerciseCorrection = async () => {
    try {
      await wait(500);
      setExerciseAnimationStep('highlight-numbers');
      await wait(2000);
      setExerciseAnimationStep('show-groups');
      await wait(2000);
      setExerciseAnimationStep('show-calculation');
      await wait(2000);
      setExerciseAnimationStep('show-result');
      // Ne pas remettre √† null pour garder l'animation visible
    } catch (error) {
      console.error('Erreur dans animateExerciseCorrection:', error);
      setExerciseAnimationStep(null);
      setShowExerciseAnimation(false);
    }
  };

  const nextExercise = () => {
    // Arr√™ter tous les vocaux et animations en cours
    stopAllVocalsAndAnimations();

    if (currentExercise < exercises.length - 1) {
      setCurrentExercise(currentExercise + 1);
      setUserAnswer('');
      setIsCorrect(null);
      setShowExerciseAnimation(false);
      setExerciseAnimationStep(null);
      setExercisesIsPlayingVocal(false);
    } else {
      setShowCompletionModal(true);
    }
  };

  const resetExercises = () => {
    setCurrentExercise(0);
    setUserAnswer('');
    setIsCorrect(null);
    setScore(0);
    setShowCompletionModal(false);
    setShowExerciseAnimation(false);
    setExerciseAnimationStep(null);
    setExercisesHasStarted(false);
    setExercisesIsPlayingVocal(false);
  };

  // Gestion des √©v√©nements pour arr√™ter les vocaux
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        stopAllVocalsAndAnimations();
      }
    };

    const handleBeforeUnload = () => {
      stopAllVocalsAndAnimations();
    };

    const handlePopState = () => {
      stopAllVocalsAndAnimations();
    };

    // Event listeners
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('pagehide', handleBeforeUnload);
    window.addEventListener('popstate', handlePopState);

    // Override history methods
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = function(...args) {
      stopAllVocalsAndAnimations();
      return originalPushState.apply(history, args);
    };
    
    history.replaceState = function(...args) {
      stopAllVocalsAndAnimations();
      return originalReplaceState.apply(history, args);
    };

    return () => {
      stopAllVocalsAndAnimations();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('pagehide', handleBeforeUnload);
      window.removeEventListener('popstate', handlePopState);
      history.pushState = originalPushState;
      history.replaceState = originalReplaceState;
    };
  }, []);

  // Effet pour g√©rer les changements d'onglet interne (cours ‚Üî exercices)
  useEffect(() => {
    stopAllVocalsAndAnimations();
  }, [showExercises]);

  // Fonction pour rendre les objets avec animations
  const renderObjects = (count: number, item: string, colorClass: string) => {
    return Array.from({ length: count }, (_, i) => (
      <div
        key={i}
        className={`text-3xl ${colorClass} transition-all duration-500 transform ${
          animatingStep === 'group1' || animatingStep === 'group2' ? 'animate-bounce' : ''
        }`}
        style={{ animationDelay: `${i * 100}ms` }}
      >
        {item}
      </div>
    ));
  };

  // Fonction officielle pour rendre une addition pos√©e (adapt√©e pour CE2)
  const renderPostedAddition = (exampleData: any, isAnimated = false, showHelperBox = false, animationStep?: string) => {
    const example = {
      num1: exampleData.first,
      num2: exampleData.second,
      result: exampleData.result || exampleData.answer, // G√©rer les deux cas : probl√®mes (result) et exercices (answer)
      hasCarry: ((exampleData.first % 10) + (exampleData.second % 10)) >= 10 || 
                (Math.floor(exampleData.first / 10) % 10 + Math.floor(exampleData.second / 10) % 10 + (((exampleData.first % 10) + (exampleData.second % 10)) >= 10 ? 1 : 0)) >= 10
    };
    
    // √âtats simul√©s pour l'animation
    const calculationStep = animationStep === 'group1' ? 'setup' :
                           animationStep === 'group2' ? 'setup' :
                           animationStep === 'calculation' ? 'units' :
                           animationStep === 'result' ? 'result' :
                           animationStep === 'show-calculation' ? 'tens' :
                           animationStep === 'show-result' ? 'result' :
                           animationStep === 'show-groups' ? 'hundreds' : null;

    // Calcul des retenues
    const unitsSum = (example.num1 % 10) + (example.num2 % 10);
    const carryToTens = unitsSum >= 10 ? 1 : 0;
    const tensSum = Math.floor(example.num1 / 10) % 10 + Math.floor(example.num2 / 10) % 10 + carryToTens;
    const carryToHundreds = tensSum >= 10 ? 1 : 0;
    
    const carryValues = {
      toTens: carryToTens,
      toHundreds: carryToHundreds
    };
    
    const showingCarry = calculationStep === 'result' && example.hasCarry;
    
    const partialResults = calculationStep === 'result' ? {
      units: (unitsSum % 10).toString(),
      tens: (tensSum % 10).toString(),
      hundreds: Math.floor(example.num1 / 100) % 10 + Math.floor(example.num2 / 100) % 10 + carryToHundreds > 0 ? 
               (Math.floor(example.num1 / 100) % 10 + Math.floor(example.num2 / 100) % 10 + carryToHundreds).toString() : null
    } : { units: null, tens: null, hundreds: null };

    // D√©terminer le nombre de chiffres maximum
    const maxDigits = Math.max(example.num1.toString().length, example.num2.toString().length, example.result.toString().length);
    const num1Str = example.num1.toString().padStart(maxDigits, ' ');
    const num2Str = example.num2.toString().padStart(maxDigits, ' ');
    const resultStr = example.result.toString().padStart(maxDigits, ' ');
    
    // S√©parer les chiffres (unit√©s, dizaines, centaines)
    const num1Units = num1Str[num1Str.length - 1];
    const num1Tens = num1Str[num1Str.length - 2] === ' ' ? '' : num1Str[num1Str.length - 2];
    const num1Hundreds = maxDigits >= 3 ? (num1Str[num1Str.length - 3] === ' ' ? '' : num1Str[num1Str.length - 3]) : '';
    
    const num2Units = num2Str[num2Str.length - 1];
    const num2Tens = num2Str[num2Str.length - 2] === ' ' ? '' : num2Str[num2Str.length - 2];
    const num2Hundreds = maxDigits >= 3 ? (num2Str[num2Str.length - 3] === ' ' ? '' : num2Str[num2Str.length - 3]) : '';
    
    const resultUnits = resultStr[resultStr.length - 1];
    const resultTens = resultStr[resultStr.length - 2] === ' ' ? '' : resultStr[resultStr.length - 2];
    const resultHundreds = maxDigits >= 3 ? (resultStr[resultStr.length - 3] === ' ' ? '' : resultStr[resultStr.length - 3]) : '';
    
    return (
      <div className={`bg-gradient-to-br from-white to-blue-50 p-8 rounded-xl shadow-lg border-2 transition-all duration-500 border-gray-200`}>
        <div className="flex justify-center">
          <div className="space-y-4">
            {/* Tableau des colonnes C, D et U (ou seulement D et U) */}
            <div className="flex justify-center mb-4">
              <div className={`grid gap-4 sm:gap-6 font-bold text-sm sm:text-base ${maxDigits >= 3 ? 'grid-cols-3' : 'grid-cols-2'}`}>
                {maxDigits >= 3 && (
                  <div className={`text-center p-2 rounded-lg transition-all duration-500 ${
                    calculationStep === 'hundreds' ? 'bg-purple-200 text-purple-800 animate-column-highlight' : 'bg-gray-100 text-gray-600'
                  }`}>
                    C
                  </div>
                )}
                <div className={`text-center p-2 rounded-lg transition-all duration-500 ${
                  calculationStep === 'tens' ? 'bg-orange-200 text-orange-800 animate-column-highlight' : 'bg-gray-100 text-gray-600'
                }`}>
                  D
                </div>
                <div className={`text-center p-2 rounded-lg transition-all duration-500 ${
                  calculationStep === 'units' ? 'bg-blue-200 text-blue-800 animate-column-highlight' : 'bg-gray-100 text-gray-600'
                }`}>
                  U
                </div>
              </div>
            </div>

            {/* Retenues si n√©cessaire */}
            {example.hasCarry && showingCarry && (
              <div className="flex justify-center">
                <div className={`grid gap-8 ${maxDigits >= 3 ? 'grid-cols-3' : 'grid-cols-2'}`}>
                  {maxDigits >= 3 && (
                    <div className="text-center text-red-500 text-lg">
                      {carryValues.toHundreds > 0 && (
                        <sup className="bg-red-100 px-2 py-1 rounded-full border-2 border-red-300 animate-carry-bounce">
                          {carryValues.toHundreds}
                        </sup>
                      )}
                    </div>
                  )}
                  <div className="text-center text-red-500 text-lg">
                    {carryValues.toTens > 0 && (
                      <sup className="bg-red-100 px-2 py-1 rounded-full border-2 border-red-300 animate-carry-bounce">
                        {carryValues.toTens}
                      </sup>
                    )}
                  </div>
                  <div className="text-center"></div>
                </div>
              </div>
            )}
            
            {/* Premier nombre */}
            <div className="flex justify-center">
              <div className={`grid gap-2 sm:gap-6 font-mono text-base sm:text-2xl ${maxDigits >= 3 ? 'grid-cols-3' : 'grid-cols-2'}`}>
                {maxDigits >= 3 && (
                  <div className={`text-center p-3 rounded-lg transition-all duration-500 ${
                    calculationStep === 'hundreds' ? 'bg-purple-100 text-purple-700 animate-column-highlight' : 
                    calculationStep === 'setup' ? 'text-blue-600 font-bold' : 'text-gray-700'
                  } ${num1Hundreds ? 'border-2 border-dashed border-purple-300' : ''}`}>
                    {num1Hundreds || ''}
                  </div>
                )}
                <div className={`text-center p-3 rounded-lg transition-all duration-500 ${
                  calculationStep === 'tens' ? 'bg-orange-100 text-orange-700 animate-column-highlight' : 
                  calculationStep === 'setup' ? 'text-blue-600 font-bold' : 'text-gray-700'
                } ${num1Tens ? 'border-2 border-dashed border-orange-300' : ''}`}>
                  {num1Tens || ''}
                </div>
                <div className={`text-center p-3 rounded-lg transition-all duration-500 ${
                  calculationStep === 'units' ? 'bg-blue-100 text-blue-700 animate-column-highlight' : 
                  calculationStep === 'setup' ? 'text-blue-600 font-bold' : 'text-gray-700'
                } border-2 border-dashed border-blue-300`}>
                  {num1Units}
                </div>
              </div>
            </div>
            
            {/* Deuxi√®me nombre avec signe + */}
            <div className="flex justify-center">
              <div className="relative">
                <div className={`grid gap-2 sm:gap-6 font-mono text-base sm:text-2xl ${maxDigits >= 3 ? 'grid-cols-3' : 'grid-cols-2'}`}>
                  {maxDigits >= 3 && (
                    <div className={`text-center p-3 rounded-lg transition-all duration-500 ${
                      calculationStep === 'hundreds' ? 'bg-purple-100 text-purple-700 animate-column-highlight' : 
                      calculationStep === 'setup' ? 'text-green-600 font-bold' : 'text-gray-700'
                    } ${num2Hundreds ? 'border-2 border-dashed border-purple-300' : ''}`}>
                      {num2Hundreds || ''}
                    </div>
                  )}
                  <div className={`text-center p-3 rounded-lg transition-all duration-500 relative ${
                    calculationStep === 'tens' ? 'bg-orange-100 text-orange-700 animate-column-highlight' : 
                    calculationStep === 'setup' ? 'text-green-600 font-bold' : 'text-gray-700'
                  } ${num2Tens ? 'border-2 border-dashed border-orange-300' : ''}`}>
                    {num2Tens || ''}
                  </div>
                  <div className={`text-center p-3 rounded-lg transition-all duration-500 ${
                    calculationStep === 'units' ? 'bg-blue-100 text-blue-700 animate-column-highlight' : 
                    calculationStep === 'setup' ? 'text-green-600 font-bold' : 'text-gray-700'
                  } border-2 border-dashed border-blue-300`}>
                    {num2Units}
                  </div>
                </div>
                {/* Signe + positionn√© √† gauche sans affecter l'alignement */}
                <div className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-8 text-3xl font-mono text-green-600 font-bold">
                  +
                </div>
              </div>
            </div>
            
            {/* Ligne de s√©paration anim√©e */}
            <div className="flex justify-center">
              <div className={`border-t-4 my-3 transition-all duration-700 ${
                calculationStep === 'result' ? 'border-purple-500 shadow-lg animate-pulse' : 'border-purple-400'
              }`} style={{ width: maxDigits >= 3 ? '11rem' : '7.5rem' }}></div>
            </div>
            
            {/* R√©sultat avec animations progressives */}
            <div className="flex justify-center">
              <div className={`grid gap-4 sm:gap-8 font-mono text-lg sm:text-3xl font-bold ${maxDigits >= 3 ? 'grid-cols-3' : 'grid-cols-2'}`}>
                {maxDigits >= 3 && (
                  <div className={`text-center p-3 rounded-lg transition-all duration-1000 ${
                    partialResults.hundreds || calculationStep === 'result' ? 'bg-purple-100 text-purple-700 animate-result-reveal' : 'text-gray-400'
                  } ${resultHundreds ? 'border-2 border-dashed border-purple-300' : ''}`}>
                    {partialResults.hundreds || (calculationStep === 'result' ? resultHundreds : '?')}
                  </div>
                )}
                <div className={`text-center p-3 rounded-lg transition-all duration-1000 ${
                  partialResults.tens || calculationStep === 'result' ? 'bg-purple-100 text-purple-700 animate-result-reveal' : 'text-gray-400'
                } ${resultTens ? 'border-2 border-dashed border-purple-300' : ''}`}>
                  {partialResults.tens || (calculationStep === 'result' ? resultTens : '?')}
                </div>
                <div className={`text-center p-3 rounded-lg transition-all duration-1000 border-2 border-dashed border-purple-300 ${
                  partialResults.units || calculationStep === 'result' ? 'bg-purple-100 text-purple-700 animate-result-reveal' : 'text-gray-400'
                }`}>
                  {partialResults.units || (calculationStep === 'result' ? resultUnits : '?')}
                </div>
              </div>
            </div>

            {/* Explications textuelles anim√©es */}
            {isAnimated && calculationStep === 'result' && (
              <div className="mt-6 text-center">
                <div className="bg-purple-100 text-purple-800 p-3 rounded-lg animate-fade-in font-medium">
                  üü£ <strong>R√©sultat final</strong> : {example.result} ! Tu as r√©ussi !
                </div>
                {showingCarry && (
                  <div className="bg-red-100 text-red-800 p-3 rounded-lg animate-bounce font-medium mt-2">
                    ‚ö†Ô∏è <strong>Retenue</strong> : regarde le calcul √† c√¥t√© !
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-100">
      {/* Animation CSS personnalis√©e pour les ic√¥nes */}
      <style dangerouslySetInnerHTML={{
        __html: `
          @keyframes subtle-glow {
            0%, 100% {
              opacity: 0.8;
              transform: scale(1);
              filter: brightness(1);
            }
            50% {
              opacity: 1;
              transform: scale(1.05);
              filter: brightness(1.1);
            }
          }
        `
      }} />
      

      
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <Link 
            href="/chapitre/ce2-operations-complexes/addition-ce2" 
            onClick={stopAllVocalsAndAnimations}
            className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Retour au chapitre</span>
          </Link>
          
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              üßÆ Probl√®mes d'addition - CE2
            </h1>
            <p className="text-lg text-gray-600">
              Apprendre √† r√©soudre des probl√®mes d'addition - Niveau CE2
            </p>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex justify-center space-x-4 mb-8">
          <button
            onClick={() => {
              stopAllVocalsAndAnimations();
              setShowExercises(false);
            }}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              !showExercises
                ? 'bg-orange-600 text-white shadow-lg'
                : 'bg-white text-orange-600 hover:bg-orange-50'
            } ${highlightCourseButton ? 'ring-4 ring-orange-400 animate-pulse scale-105' : ''}`}
          >
            üìö Cours
          </button>
          <button
            ref={exerciseTabRef}
            onClick={() => {
              stopAllVocalsAndAnimations();
              setShowExercises(true);
            }}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              showExercises
                ? 'bg-orange-600 text-white shadow-lg'
                : 'bg-white text-orange-600 hover:bg-orange-50'
            } ${highlightExerciseButton ? 'ring-4 ring-blue-400 animate-pulse scale-105' : ''}`}
          >
            üéØ Exercices
          </button>
        </div>

        {/* Bouton Stop unique avec Steve - visible quand une animation est en cours */}
        {(isPlayingVocal || exercisesIsPlayingVocal || isAnimationRunning) && (
          <div className="fixed top-20 right-4 z-10 animate-fade-in">
            <button
              onClick={stopAllVocalsAndAnimations}
              className="flex items-center gap-2 px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg shadow-lg transition-all hover:scale-105"
            >
              <div className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
                {!imageError && (
                  <img
                    src="/image/Minecraftstyle.png"
                    alt="Sam"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-sm">üß±</div>
                )}
              </div>
              <span className="font-semibold text-sm">Stop</span> 
              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <rect x="6" y="4" width="2" height="12" />
                <rect x="12" y="4" width="2" height="12" />
              </svg>
            </button>
          </div>
        )}

        {!showExercises ? (
          /* COURS - MOBILE OPTIMIS√â */
          <div className="space-y-2 sm:space-y-6">
            {/* Image de Steve avec bouton D√âMARRER */}
            <div className="flex items-center justify-center gap-2 sm:gap-4 p-2 sm:p-4 mb-3 sm:mb-6">
              {/* Image de Steve */}
              <div className={`relative transition-all duration-500 border-2 border-orange-300 rounded-full bg-gradient-to-br from-orange-100 to-red-100 ${
                isPlayingVocal
                    ? 'w-14 sm:w-24 h-14 sm:h-24' // When speaking - plus petit sur mobile
                  : samSizeExpanded
                      ? 'w-12 sm:w-32 h-12 sm:h-32' // Enlarged - plus petit sur mobile
                      : 'w-10 sm:w-20 h-10 sm:h-20' // Normal - plus petit sur mobile
              } flex items-center justify-center hover:scale-105 cursor-pointer`}>
                {!imageError && (
                  <img 
                    src="/image/Minecraftstyle.png"
                    alt="Sam"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-lg sm:text-2xl">üß±</div>
                )}
                
                {/* Megaphone anim√© quand Sam parle */}
                {isPlayingVocal && (
                  <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 rounded-full p-1 sm:p-2 shadow-lg animate-bounce">
                    <svg className="w-2 h-2 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h3.763l7.79 3.894A1 1 0 0018 15V3zM14 8.59c0 1.2.8 2.27 2 2.27v.64c-1.77 0-3.2-1.4-3.2-3.14 0-1.74 1.43-3.14 3.2-3.14v.64c-1.2 0-2 1.07-2 2.27z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>

              {/* Bouton D√âMARRER avec Steve */}
              <button
                onClick={explainChapterWithSam}
                disabled={isPlayingVocal}
                className={`px-3 sm:px-6 py-2 sm:py-3 rounded-lg font-bold text-sm sm:text-lg shadow-lg transition-all ${
                  isPlayingVocal
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:shadow-xl hover:scale-105'
                } ${!hasStarted && !isPlayingVocal ? 'animate-pulse' : ''}`}
              >
                <Play className="w-3 h-3 sm:w-5 sm:h-5 inline-block mr-1 sm:mr-2" />
                {isPlayingVocal ? 'Steve explique...' : 'D√âMARRER'}
              </button>
            </div>



            {/* Introduction */}
            <div 
              ref={introSectionRef}
              id="intro-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'intro' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-4">
                <div className="p-1 sm:p-2 bg-orange-100 rounded-lg">
                  <Book className="w-4 h-4 sm:w-6 sm:h-6 text-orange-600" />
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">Qu'est-ce qu'un probl√®me d'addition ?</h2>
                {/* Ic√¥ne d'animation pour l'introduction */}
                <div 
                  onClick={readIntroText}
                  className={`bg-gradient-to-r from-orange-500 to-red-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-orange-300 ${
                    highlightedElement === 'intro' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                  }`} 
                  style={{animation: 'subtle-glow 2s infinite'}}
                  title="Cliquer pour √©couter la d√©finition"
                >
                  üßÆ
                </div>
              </div>
              <p className="text-sm sm:text-lg text-gray-700 leading-relaxed">
                Un probl√®me d'addition raconte une histoire avec des nombres. 
                Notre mission est de trouver ces nombres et de les additionner pour r√©pondre √† la question !
              </p>
            </div>

            {/* M√©thode */}
            <div 
              ref={methodSectionRef}
              id="method-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'method' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <div className="p-1 sm:p-2 bg-purple-100 rounded-lg">
                  <Target className="w-4 h-4 sm:w-6 sm:h-6 text-purple-600" />
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">Ma m√©thode en 3 √©tapes</h2>
                {/* Bouton d'animation pour la m√©thode */}
                <button 
                  onClick={() => readSectionMethod()}
                  className={`bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-purple-300 ${
                    highlightedElement === 'method' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                  }`} 
                  style={{animation: 'subtle-glow 2s infinite'}}
                  title="Cliquer pour √©couter cette section"
                >
                  üéØ
                </button>
              </div>
              
              <div className="space-y-4">
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step1' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'
                }`}>
                  <div 
                    className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold cursor-pointer hover:scale-110 transition-all duration-300 hover:bg-blue-600"
                    onClick={() => readMethodStep('step1')}
                    title="Cliquer pour √©couter cette √©tape"
                  >
                    1
                  </div>
                  <p className="text-lg text-gray-800">Je lis le probl√®me et je comprends l'histoire</p>
                </div>
                
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step2' ? 'bg-green-100 ring-2 ring-green-400' : 'bg-gray-100'
                }`}>
                  <div 
                    className="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold cursor-pointer hover:scale-110 transition-all duration-300 hover:bg-green-600"
                    onClick={() => readMethodStep('step2')}
                    title="Cliquer pour √©couter cette √©tape"
                  >
                    2
                  </div>
                  <p className="text-lg text-gray-800">Je trouve les deux nombres √† additionner</p>
                </div>
                
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step3' ? 'bg-purple-100 ring-2 ring-purple-400' : 'bg-gray-100'
                }`}>
                  <div 
                    className="w-8 h-8 bg-purple-500 text-white rounded-full flex items-center justify-center font-bold cursor-pointer hover:scale-110 transition-all duration-300 hover:bg-purple-600"
                    onClick={() => readMethodStep('step3')}
                    title="Cliquer pour √©couter cette √©tape"
                  >
                    3
                  </div>
                  <p className="text-lg text-gray-800">J'√©cris l'addition et je calcule</p>
                </div>
              </div>
            </div>

            {/* D√©monstration du soulignage */}
            <div className="bg-white rounded-xl shadow-lg p-3 sm:p-6">
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <div className="p-1 sm:p-2 bg-yellow-100 rounded-lg">
                  <span className="text-lg sm:text-2xl">‚úèÔ∏è</span>
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">D√©monstration : souligner les nombres</h2>
              </div>
              
              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded-lg">
                  <p className="text-lg font-semibold text-gray-800 mb-3">Exemple d'histoire :</p>
                  <div className="text-lg text-gray-700 p-3 bg-white rounded border">
                    {highlightNumbers("Marie a 3 bonbons rouges et 4 bonbons bleus. Combien a-t-elle de bonbons en tout ?", highlightNumbersInStory)}
                  </div>
                </div>
                
                {highlightNumbersInStory && (
                  <div className="text-center p-4 bg-yellow-50 border-2 border-yellow-200 rounded-lg">
                    <p className="text-lg text-yellow-800 font-semibold">
                      üéØ Voyez comme les nombres <span className="bg-yellow-300 px-2 py-1 rounded font-black">3</span> et <span className="bg-yellow-300 px-2 py-1 rounded font-black">4</span> ressortent bien !
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Exemples */}
            <div 
              ref={examplesSectionRef}
              id="examples-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'examples' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center justify-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">
                  üéØ Choisis un probl√®me √† r√©soudre ensemble !
                </h2>
                {/* Ic√¥ne d'animation pour les exemples */}
                <div className={`bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-green-300 ${
                  highlightedElement === 'examples' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                }`} 
                     style={{animation: 'subtle-glow 2s infinite'}}>
                  üéØ
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {problemExamples.map((example, index) => (
                  <div 
                    key={index}
                    className={`bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg p-6 transition-all duration-300 ${
                      isAnimationRunning 
                        ? 'opacity-50 cursor-not-allowed' 
                        : 'cursor-pointer hover:scale-105 hover:shadow-lg'
                    } ${currentExample === index ? 'ring-4 ring-purple-400 bg-purple-100' : ''} ${
                      highlightedExamples.includes(index) ? 'ring-4 ring-orange-400 bg-orange-100 animate-pulse' : ''
                    }`}
                    onClick={isAnimationRunning ? undefined : () => explainSpecificExample(index)}
                  >
                    <div className="text-center">
                      <div className="text-4xl mb-2">{example.item}</div>
                      <h3 className="font-bold text-lg text-gray-800 mb-2">{example.title}</h3>
                      <div className="text-sm text-gray-600 mb-4">
                        {example.story}
                      </div>
                      <div className={`px-3 py-1 rounded-lg text-sm transition-all ${
                        highlightedExamples.includes(index) 
                          ? 'bg-orange-500 text-white animate-bounce shadow-lg ring-2 ring-orange-300' 
                          : 'bg-blue-500 text-white hover:bg-blue-600'
                      }`}>
                        ‚ñ∂Ô∏è Voir l'animation
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Zone d'animation - toujours pr√©sente pour √©viter les tremblements */}
            <div 
              id="animation-section"
              className={`bg-white rounded-xl shadow-lg transition-all duration-300 ${
                currentExample !== null ? 'opacity-100 p-6' : 'opacity-0 p-0 h-4'
              }`}
              style={{ 
                overflow: currentExample !== null ? 'visible' : 'hidden',
                height: currentExample !== null ? 'auto' : '1rem'
              }}
            >
              <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
                üé¨ Animation du probl√®me
              </h2>
              
              {currentExample !== null && (() => {
                const example = problemExamples[currentExample];
                return (
                    <div className="space-y-6">
                      {/* Histoire */}
                      <div className={`p-4 rounded-lg text-center ${
                        highlightedElement === 'story' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'
                      }`}>
                        <div className="text-lg font-semibold text-gray-800">
                          {highlightNumbers(example.story, highlightNumbersInStory)}
                        </div>
                      </div>

                                                  {/* Identification des nombres */}
                            {animatingStep === 'identify' && (
                              <div className="text-center p-4 bg-yellow-100 rounded-lg">
                                <p className="text-lg text-yellow-800">
                                  Je trouve les nombres : <span className="font-bold text-blue-600">{example.first}</span> et <span className="font-bold text-green-600">{example.second}</span>
                                </p>
                              </div>
                            )}

                            {/* Calculs interm√©diaires si n√©cessaire */}
                            {animatingStep === 'intermediate' && example.id === 'aquarium' && (
                              <div className="text-center p-4 bg-orange-100 rounded-lg border-2 border-orange-200">
                                <p className="text-lg font-semibold text-orange-800 mb-2">Calcul des nouveaux poissons :</p>
                                <div className="space-y-2">
                                  <div className="flex items-center justify-center space-x-4">
                                    <span className="text-gray-900">Poissons command√©s :</span>
                                    <span className="font-bold text-blue-600">647</span>
                                  </div>
                                  <div className="flex items-center justify-center space-x-4">
                                    <span className="text-gray-900">Poissons pour l'autre bassin :</span>
                                    <span className="font-bold text-red-600">100</span>
                                  </div>
                                  <div className="flex items-center justify-center space-x-4 mt-2 pt-2 border-t-2 border-orange-200">
                                    <span className="text-gray-900">Calcul :</span>
                                    <span className="font-bold text-blue-600">647</span>
                                    <span className="text-gray-900">-</span>
                                    <span className="font-bold text-red-600">100</span>
                                    <span className="text-gray-900">=</span>
                                    <span className="font-bold text-green-600">547</span>
                                    <span className="text-gray-900">nouveaux poissons</span>
                                  </div>
                                </div>
                              </div>
                            )}

                      {/* Animation des objets ou addition pos√©e */}
                      {example.first <= 9 && example.second <= 9 ? (
                        // Affichage avec objets pour les petits nombres
                        <div className="flex justify-center items-center space-x-8">
                          {/* Premier groupe */}
                          {(animatingStep === 'group1' || animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                            <div className={`p-4 rounded-lg ${animatingStep === 'group1' ? 'bg-red-100 ring-2 ring-red-400' : 'bg-gray-100'}`}>
                              <div className="text-center mb-2">
                                <span className="font-bold text-gray-800">{example.first}</span>
                              </div>
                              <div className="grid grid-cols-3 gap-2">
                                {renderObjects(example.first, example.item, example.color1)}
                              </div>
                            </div>
                          )}

                          {/* Signe + */}
                          {(animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                            <div className="text-4xl font-bold text-gray-700">+</div>
                          )}

                          {/* Deuxi√®me groupe */}
                          {(animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                            <div className={`p-4 rounded-lg ${animatingStep === 'group2' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'}`}>
                              <div className="text-center mb-2">
                                <span className="font-bold text-gray-800">{example.second}</span>
                              </div>
                              <div className="grid grid-cols-3 gap-2">
                                {renderObjects(example.second, example.item, example.color2)}
                              </div>
                            </div>
                          )}

                          {/* Signe = et r√©sultat */}
                          {(animatingStep === 'calculation' || animatingStep === 'result') && (
                            <>
                              <div className="text-4xl font-bold text-gray-700">=</div>
                              <div className={`p-4 rounded-lg ${animatingStep === 'result' ? 'bg-green-100 ring-2 ring-green-400 animate-pulse' : 'bg-gray-100'}`}>
                                <div className="text-center mb-2">
                                  <span className="font-bold text-2xl text-gray-800">{example.result}</span>
                                </div>
                                {animatingStep === 'result' && (
                                  <div className="grid grid-cols-4 gap-2">
                                    {renderObjects(example.result, example.item, 'text-green-600')}
                                  </div>
                                )}
                              </div>
                            </>
                          )}
                        </div>
                      ) : (
                        // Addition pos√©e avec fonction officielle - seulement aux bonnes √©tapes
                        (animatingStep === 'calculation' || animatingStep === 'result') && 
                        renderPostedAddition(example, true, false, animatingStep || undefined)
                      )}

                      {/* Calcul √©crit */}
                      {(animatingStep === 'calculation' || animatingStep === 'result') && (
                        <div className="text-center p-4 bg-purple-100 rounded-lg">
                          <div className="text-2xl font-bold text-purple-800">
                            {highlightNumbers(`${example.first} + ${example.second} = ${example.result}`)}
                          </div>
                        </div>
                      )}

                      {/* Phrase de r√©ponse finale */}
                      {animatingStep === 'result' && (
                        <div className="text-center p-4 mt-4 bg-green-100 border-2 border-green-300 rounded-lg animate-fade-in">
                          <div className="text-lg font-bold text-green-800">
                            üéâ <strong>R√©ponse :</strong> {example.story.includes('cookies') ? 'Maman' : 
                                                         example.story.includes('fleurs') ? 'Le jardinier' :
                                                         example.story.includes('livres') ? 'La ma√Ætresse' :
                                                         example.story.includes('billes') ? 'Paul' :
                                                         example.story.includes('invit√©s') ? 'Emma' :
                                                         example.story.includes('chats') ? 'Le fermier' :
                                                         example.story.includes('crayons') ? 'Sophie' : 'Il'} a {example.result} {example.item} en tout !
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })()}
            </div>
          </div>
        ) : (
          /* Section Exercices */
          <div className="space-y-6">
            {/* Image de Steve avec bouton D√âMARRER pour les exercices */}
            <div className="flex items-center justify-center gap-2 sm:gap-4 p-2 sm:p-4 mb-3 sm:mb-6">
              {/* Image de Steve */}
              <div className={`relative transition-all duration-500 border-2 border-blue-300 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 ${
                exercisesIsPlayingVocal
                    ? 'w-14 sm:w-24 h-14 sm:h-24' // When speaking - plus petit sur mobile
                  : samSizeExpanded
                      ? 'w-12 sm:w-32 h-12 sm:h-32' // Enlarged - plus petit sur mobile
                      : 'w-10 sm:w-20 h-10 sm:h-20' // Normal - plus petit sur mobile
              } flex items-center justify-center hover:scale-105 cursor-pointer`}>
                {!imageError && (
                  <img 
                    src="/image/Minecraftstyle.png"
                    alt="Sam"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-lg sm:text-2xl">üß±</div>
                )}
                
                {/* Megaphone anim√© quand Sam parle */}
                {exercisesIsPlayingVocal && (
                  <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 rounded-full p-1 sm:p-2 shadow-lg animate-bounce">
                    <svg className="w-2 h-2 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h3.763l7.79 3.894A1 1 0 0018 15V3zM14 8.59c0 1.2.8 2.27 2 2.27v.64c-1.77 0-3.2-1.4-3.2-3.14 0-1.74 1.43-3.14 3.2-3.14v.64c-1.2 0-2 1.07-2 2.27z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>

              {/* Bouton D√âMARRER avec Steve pour les exercices */}
              <button
                onClick={explainExercisesWithSam}
                disabled={exercisesIsPlayingVocal}
                className={`px-3 sm:px-6 py-2 sm:py-3 rounded-lg font-bold text-sm sm:text-lg shadow-lg transition-all ${
                  exercisesIsPlayingVocal
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:shadow-xl hover:scale-105'
                } ${!exercisesHasStarted && !exercisesIsPlayingVocal ? 'animate-pulse' : ''}`}
              >
                <Play className="w-3 h-3 sm:w-5 sm:h-5 inline-block mr-1 sm:mr-2" />
                {exercisesIsPlayingVocal ? 'Steve explique...' : 'D√âMARRER LES EXERCICES'}
              </button>
            </div>

            {/* Instructions pour les exercices */}
            <div className="bg-blue-50 border-2 border-blue-200 rounded-xl shadow-lg p-4 sm:p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <span className="text-2xl">üéØ</span>
                </div>
                <h2 className="text-xl sm:text-2xl font-bold text-blue-800">Comment bien r√©ussir tes exercices ?</h2>
              </div>
              
              <div className="space-y-3 text-sm sm:text-base text-blue-700">
                <div className="flex items-start gap-3">
                  <span className="text-lg">üìñ</span>
                  <p><strong>1. Lis bien l'histoire</strong> de chaque probl√®me pour comprendre la situation.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">üîç</span>
                  <p><strong>2. Trouve les deux nombres</strong> importants dans l'histoire √† additionner.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">‚úèÔ∏è</span>
                  <p><strong>3. Tape ta r√©ponse</strong> dans la case avec le point d'interrogation.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">‚ú®</span>
                  <p><strong>4. Si tu te trompes</strong>, Steve t'aidera avec une animation pour comprendre !</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-gray-800">
                  Exercice {currentExercise + 1} / {exercises.length}
                </h2>
                <div className="text-lg font-semibold text-blue-600">
                  Score : {score} / {exercises.length}
                </div>
              </div>

              {!showCompletionModal ? (
                <div className="space-y-6">
                  {/* Ic√¥ne visuelle */}
                  <div className="text-center">
                    <div className="text-6xl mb-4">{exercises[currentExercise].visual}</div>
                  </div>

                  {/* √ânonc√© du probl√®me */}
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="text-lg text-center text-gray-800 mb-4">{exercises[currentExercise].story}</div>
                    
                    {/* Bouton Lire l'√©nonc√© */}
                    <div className="text-center">
                      <button
                        id="read-story-button"
                        onClick={readCurrentStory}
                        className={`px-4 py-2 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 transition-all ${
                          highlightedElement === 'read-story-button' ? 'ring-4 ring-yellow-400 animate-pulse bg-yellow-500' : ''
                        }`}
                      >
                        üîä Lire l'√©nonc√©
                      </button>
                    </div>
                  </div>

                  {/* Zone de r√©ponse */}
                  <div className="text-center space-y-4">
                    <input
                      id="answer-input"
                      type="number"
                      value={userAnswer}
                      onChange={(e) => setUserAnswer(e.target.value)}
                      placeholder="?"
                      autoComplete="off"
                      autoCorrect="off"
                      autoCapitalize="off"
                      spellCheck="false"
                      className={`text-center text-xl font-bold border-2 border-gray-300 rounded-lg px-4 py-2 w-32 transition-all ${
                        highlightedElement === 'answer-input' ? 'ring-4 ring-yellow-400 animate-pulse border-yellow-500' : ''
                      }`}
                      onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
                    />
                    <div>
                      <button
                        id="validate-button"
                        onClick={checkAnswer}
                        disabled={!userAnswer}
                        className={`bg-blue-500 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-600 disabled:opacity-50 transition-all ${
                          highlightedElement === 'validate-button' ? 'ring-4 ring-yellow-400 animate-pulse bg-yellow-500' : ''
                        }`}
                      >
                        V√©rifier
                      </button>
                    </div>
                  </div>

                  {/* Animation de correction visuelle pour les r√©ponses incorrectes */}
                  {showExerciseAnimation && !isCorrect && (
                    <div className="bg-yellow-50 border-2 border-yellow-300 rounded-lg p-6 mb-4">
                      <h3 className="text-lg font-bold text-center mb-4 text-yellow-800">
                        üéØ Regardons ensemble la solution !
                      </h3>
                      
                      {(() => {
                        const exercise = exercises[currentExercise];
                        return (
                          <div className="space-y-4">
                            {/* √ânonc√© en surbrillance avec nombres mis en √©vidence */}
                            <div className="p-3 bg-blue-100 rounded-lg">
                              <div className="text-center font-semibold text-blue-800">
                                {exerciseAnimationStep === 'highlight-numbers' ? 
                                  highlightNumbers(exercise.story, true) : 
                                  exercise.story
                                }
                              </div>
                            </div>

                            {/* Explication de l'identification des nombres */}
                            {(exerciseAnimationStep === 'highlight-numbers' || exerciseAnimationStep === 'show-ethan-calculation' || exerciseAnimationStep === 'show-groups' || exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              <div className="text-center p-3 bg-yellow-100 rounded-lg">
                                <p className="text-lg text-yellow-800">
                                  üéØ Je trouve les nombres : <span className="font-bold text-blue-600">{exercise.first}</span> et <span className="font-bold text-green-600">{exercise.second}</span>
                                </p>
                              </div>
                            )}

                            {/* Calcul interm√©diaire pour l'exercice de Julien et Ethan */}
                            {exercise.story.includes('Julien') && exercise.story.includes('Ethan') && exerciseAnimationStep === 'show-ethan-calculation' && (
                              <div className="text-center p-4 bg-purple-100 rounded-lg">
                                <p className="text-lg font-semibold text-purple-800 mb-2">
                                  D'abord, calculons combien Ethan a de billes :
                                </p>
                                <div className="flex justify-center items-center space-x-4">
                                  <span className="text-xl font-bold text-blue-600">123</span>
                                  <span className="text-xl">+</span>
                                  <span className="text-xl font-bold text-green-600">198</span>
                                  <span className="text-xl">=</span>
                                  <span className="text-xl font-bold text-purple-600">321</span>
                                </div>
                                <p className="mt-2 text-purple-700">
                                  Ethan a donc 321 billes
                                </p>
                              </div>
                            )}

                            {/* √âtapes interm√©diaires pour les exercices complexes */}
                            {(exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              <>
                                {exercise.story.includes('tournoi de basket') && (
                                  <div className="mb-4 p-4 bg-blue-50 rounded-lg border-2 border-blue-200">
                                    <p className="text-lg font-semibold text-blue-800 mb-2">√âtapes du calcul :</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Aigles :</span>
                                        <span className="font-bold text-blue-600">167</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-blue-600">235</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">402</span>
                                        <span className="text-gray-900">points</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Lions :</span>
                                        <span className="font-bold text-red-600">186</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-red-600">198</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">384</span>
                                        <span className="text-gray-900">points</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                {exercise.story.includes('Julien') && exercise.story.includes('Ethan') && (
                                  <div className="mb-4 p-4 bg-purple-50 rounded-lg border-2 border-purple-200">
                                    <p className="text-lg font-semibold text-purple-800 mb-2">Calcul des billes d'Ethan :</p>
                                    <div className="flex items-center justify-center space-x-4">
                                      <span className="text-gray-900">Billes de Julien</span>
                                      <span className="font-bold text-blue-600">123</span>
                                      <span className="text-gray-900">+</span>
                                      <span className="text-gray-900">Billes en plus</span>
                                      <span className="font-bold text-purple-600">198</span>
                                      <span className="text-gray-900">=</span>
                                      <span className="font-bold text-green-600">321</span>
                                      <span className="text-gray-900">billes</span>
                                    </div>
                                  </div>
                                )}
                                {exercise.story.includes('voyage scolaire') && exercise.story.includes('train') && (
                                  <div className="mb-4 p-4 bg-orange-50 rounded-lg border-2 border-orange-200">
                                    <p className="text-lg font-semibold text-orange-800 mb-2">Calcul du trajet complet :</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Trajet aller :</span>
                                        <span className="font-bold text-blue-600">378</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-blue-600">456</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">834</span>
                                        <span className="text-gray-900">kilom√®tres</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Trajet retour :</span>
                                        <span className="font-bold text-purple-600">834</span>
                                        <span className="text-gray-900">kilom√®tres</span>
                                        <span className="text-gray-900">(m√™me distance)</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4 mt-2 pt-2 border-t-2 border-orange-200">
                                        <span className="text-gray-900">Total :</span>
                                        <span className="font-bold text-blue-600">834</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-purple-600">834</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">1668</span>
                                        <span className="text-gray-900">kilom√®tres</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                {exercise.story.includes('brebis') && exercise.story.includes('agneaux') && (
                                  <div className="mb-4 p-4 bg-green-50 rounded-lg border-2 border-green-200">
                                    <p className="text-lg font-semibold text-green-800 mb-2">Calcul des agneaux :</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Nouveaux agneaux :</span>
                                        <span className="font-bold text-blue-600">187</span>
                                        <span className="text-gray-900">brebis</span>
                                        <span className="text-gray-900">√ó</span>
                                        <span className="font-bold text-purple-600">2</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">374</span>
                                        <span className="text-gray-900">agneaux</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Agneaux d√©j√† pr√©sents :</span>
                                        <span className="font-bold text-orange-600">146</span>
                                        <span className="text-gray-900">agneaux</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4 mt-2 pt-2 border-t-2 border-green-200">
                                        <span className="text-gray-900">Total :</span>
                                        <span className="font-bold text-blue-600">374</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-orange-600">146</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">520</span>
                                        <span className="text-gray-900">agneaux</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                {exercise.story.includes('biblioth√®que') && exercise.story.includes('ab√Æm√©s') && (
                                  <div className="mb-4 p-4 bg-blue-50 rounded-lg border-2 border-blue-200">
                                    <p className="text-lg font-semibold text-blue-800 mb-2">Calcul des livres :</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Livres au d√©part :</span>
                                        <span className="font-bold text-blue-600">267</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Nouveaux livres :</span>
                                        <span className="font-bold text-green-600">189</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Livres ab√Æm√©s :</span>
                                        <span className="font-bold text-red-600">45</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4 mt-2 pt-2 border-t-2 border-blue-200">
                                        <span className="text-gray-900">Total :</span>
                                        <span className="font-bold text-blue-600">267</span>
                                        <span className="text-gray-900">+</span>
                                        <span className="font-bold text-green-600">189</span>
                                        <span className="text-gray-900">-</span>
                                        <span className="font-bold text-red-600">45</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-purple-600">411</span>
                                        <span className="text-gray-900">livres</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                {exercise.story.includes('ruban') && exercise.story.includes('m√®tres') && (
                                  <div className="mb-4 p-4 bg-yellow-50 rounded-lg border-2 border-yellow-200">
                                    <p className="text-lg font-semibold text-yellow-800 mb-2">Conversion en d√©cim√®tres :</p>
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Premier ruban :</span>
                                        <span className="font-bold text-blue-600">8</span>
                                        <span className="text-gray-900">m√®tres</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">80</span>
                                        <span className="text-gray-900">d√©cim√®tres</span>
                                        <span className="text-gray-900">(√ó 10)</span>
                                      </div>
                                      <div className="flex items-center justify-center space-x-4">
                                        <span className="text-gray-900">Deuxi√®me ruban :</span>
                                        <span className="font-bold text-blue-600">5</span>
                                        <span className="text-gray-900">m√®tres</span>
                                        <span className="text-gray-900">=</span>
                                        <span className="font-bold text-green-600">50</span>
                                        <span className="text-gray-900">d√©cim√®tres</span>
                                        <span className="text-gray-900">(√ó 10)</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </>
                            )}

                            {/* Animation des objets ou addition pos√©e avec fonction officielle */}
                            {(exerciseAnimationStep === 'show-groups' || exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              exercise.first <= 9 && exercise.second <= 9 ? (
                                // Affichage avec objets pour les petits nombres
                                <div className="flex justify-center items-center space-x-6">
                                  {/* Premier groupe */}
                                  <div className="p-3 rounded-lg bg-red-100 ring-2 ring-red-400">
                                    <div className="text-center mb-2">
                                      <span className="font-bold text-red-800">{exercise.first}</span>
                                    </div>
                                    <div className="grid grid-cols-4 gap-1 max-w-32">
                                      {Array.from({ length: exercise.first }, (_, i) => (
                                        <div
                                          key={i}
                                          className={`text-xl ${exercise.color1} animate-bounce`}
                                          style={{ animationDelay: `${i * 100}ms` }}
                                        >
                                          {exercise.item}
                                        </div>
                                      ))}
                                    </div>
                                  </div>

                                  <div className="text-3xl font-bold text-gray-700">+</div>

                                  {/* Deuxi√®me groupe */}
                                  <div className="p-3 rounded-lg bg-blue-100 ring-2 ring-blue-400">
                                    <div className="text-center mb-2">
                                      <span className="font-bold text-blue-800">{exercise.second}</span>
                                    </div>
                                    <div className="grid grid-cols-4 gap-1 max-w-32">
                                      {Array.from({ length: exercise.second }, (_, i) => (
                                        <div
                                          key={i}
                                          className={`text-xl ${exercise.color2} animate-bounce`}
                                          style={{ animationDelay: `${i * 100}ms` }}
                                        >
                                          {exercise.item}
                                        </div>
                                      ))}
                                    </div>
                                  </div>

                                  {/* Signe = et r√©sultat pour petits nombres */}
                                  {exerciseAnimationStep === 'show-result' && (
                                    <>
                                      <div className="text-3xl font-bold text-gray-700">=</div>
                                      <div className="p-3 rounded-lg bg-green-100 ring-2 ring-green-400">
                                        <div className="text-center mb-2">
                                          <span className="font-bold text-green-800">{exercise.answer}</span>
                                        </div>
                                        <div className="grid grid-cols-4 gap-1 max-w-32">
                                          {Array.from({ length: exercise.answer }, (_, i) => (
                                            <div
                                              key={i}
                                              className={`text-xl text-green-600 animate-bounce`}
                                              style={{ animationDelay: `${i * 100}ms` }}
                                            >
                                              {exercise.item}
                                            </div>
                                          ))}
                                        </div>
                                      </div>
                                    </>
                                  )}
                                </div>
                              ) : (
                                // Addition pos√©e avec fonction officielle - correction exercices (seulement √† partir du calcul)
                                (exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') &&
                                renderPostedAddition(exercise, true, false, exerciseAnimationStep || undefined)
                              )
                            )}

                            {/* Phrase de r√©ponse finale syst√©matique pour les corrections */}
                            {exerciseAnimationStep === 'show-result' && (
                              <div className="text-center p-4 mt-4 bg-green-100 border-2 border-green-300 rounded-lg animate-fade-in">
                                <div className="text-lg font-bold text-green-800">
                                  üéâ <strong>R√©ponse :</strong> {exercise.question.includes('Hugo') ? 'Hugo' : 
                                                               exercise.question.includes('Maman') ? 'Maman' :
                                                               exercise.question.includes('Paul') ? 'Paul' :
                                                               exercise.question.includes('Zo√©') ? 'Zo√©' :
                                                               exercise.question.includes('Thomas') ? 'Thomas' : 'Il'} a {exercise.answer} {exercise.question.includes('pages') ? 'pages' :
                                                                                                                                                                                      exercise.question.includes('pi√®ces') ? 'pi√®ces d\'or' :
                                                                                                                                                                                      exercise.question.includes('cubes') ? 'cubes' :
                                                                                                                                                                                      exercise.question.includes('photos') ? 'photos' :
                                                                                                                                                                                      exercise.question.includes('points') ? 'points' : '√©l√©ments'} en tout !
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })()}
                    </div>
                  )}

                  {/* Feedback */}
                  {isCorrect !== null && (
                    <div 
                      id="exercise-correction"
                      className={`p-4 rounded-lg text-center ${
                      isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      <div className="flex items-center justify-center gap-2 mb-2">
                        {isCorrect ? (
                          <CheckCircle className="w-6 h-6" />
                        ) : (
                          <XCircle className="w-6 h-6" />
                        )}
                        <div className="text-2xl">{exercises[currentExercise].visual}</div>
                      </div>
                      <div className="mb-3">
                        <div className="font-bold">
                          {getPersonalizedFeedback(currentExercise, isCorrect)}
                        </div>
                      </div>
                      
                      {/* Afficher le bouton seulement si la r√©ponse est incorrecte */}
                      {!isCorrect && (
                        <button
                          onClick={nextExercise}
                          className="bg-orange-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-orange-600 mt-2 transition-all"
                        >
                          {currentExercise < exercises.length - 1 ? 'Exercice suivant' : 'Voir mes r√©sultats'}
                        </button>
                      )}
                      
                      {/* Message pour bonne r√©ponse */}
                      {isCorrect && (
                        <div className="text-sm text-green-600 mt-2 animate-pulse">
                          Passage automatique √† l'exercice suivant...
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ) : (
                /* Modal de fin */
                <div className="text-center space-y-6">
                  <div className="text-6xl">üéâ</div>
                  <h2 className="text-3xl font-bold text-gray-800">
                    Exercices termin√©s !
                  </h2>
                  <div className="text-2xl font-bold text-blue-600">
                    Score : {score} / {exercises.length}
                  </div>
                  <div className="flex justify-center space-x-4">
                    <button
                      onClick={resetExercises}
                      className="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600"
                    >
                      Recommencer
                    </button>
                    <button
                      onClick={() => setShowExercises(false)}
                      className="bg-orange-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-orange-600"
                    >
                      Retour au cours
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}