'use client';

import React, { useState, useRef, useEffect } from 'react';
import Link from 'next/link';
import { ArrowLeft, Play, Book, Target, CheckCircle, XCircle, Trophy, Star } from 'lucide-react';

export default function ProblemesAddition() {
  // √âtats pour la navigation et les animations
  const [showExercises, setShowExercises] = useState(false);
  const [hasStarted, setHasStarted] = useState(false);
  const [isPlayingVocal, setIsPlayingVocal] = useState(false);
  const [isAnimationRunning, setIsAnimationRunning] = useState(false);
  const [highlightedElement, setHighlightedElement] = useState<string | null>(null);
  const [animatingStep, setAnimatingStep] = useState<string | null>(null);
  const [currentExample, setCurrentExample] = useState<number | null>(null);
  const [highlightedExamples, setHighlightedExamples] = useState<number[]>([]);
  const [highlightNumbersInStory, setHighlightNumbersInStory] = useState(false);

  // √âtats pour les exercices
  const [currentExercise, setCurrentExercise] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  const [score, setScore] = useState(0);
  const [showCompletionModal, setShowCompletionModal] = useState(false);
  const [showExerciseAnimation, setShowExerciseAnimation] = useState(false);
  const [exerciseAnimationStep, setExerciseAnimationStep] = useState<string | null>(null);
  const [exercisesHasStarted, setExercisesHasStarted] = useState(false);
  const [exercisesIsPlayingVocal, setExercisesIsPlayingVocal] = useState(false);
  
  // √âtats pour Sam le Pirate
  const [samSizeExpanded, setSamSizeExpanded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [highlightCourseButton, setHighlightCourseButton] = useState(false);
  const [highlightExerciseButton, setHighlightExerciseButton] = useState(false);

  // Refs pour g√©rer l'audio
  const stopSignalRef = useRef(false);
  const currentAudioRef = useRef<SpeechSynthesisUtterance | null>(null);
  
  // Refs pour les sections
  const introSectionRef = useRef<HTMLDivElement>(null);
  const methodSectionRef = useRef<HTMLDivElement>(null);
  const examplesSectionRef = useRef<HTMLDivElement>(null);
  const exerciseTabRef = useRef<HTMLButtonElement>(null);

  // Donn√©es des probl√®mes avec animations
  const problemExamples = [
    {
      id: 'bonbons',
      title: 'Les bonbons de Marie',
      story: 'Marie a 3 bonbons rouges et 4 bonbons bleus. Combien a-t-elle de bonbons en tout ?',
      first: 3,
      second: 4,
      result: 7,
      item: 'üç¨',
      color1: 'text-red-600',
      color2: 'text-blue-600'
    },
    {
      id: 'jouets',
      title: 'Les voitures de Tom',
      story: 'Tom a 5 petites voitures et 3 camions. Combien a-t-il de v√©hicules au total ?',
      first: 5,
      second: 3,
      result: 8,
      item: 'üöó',
      color1: 'text-orange-600',
      color2: 'text-green-600'
    },
    {
      id: 'animaux',
      title: 'Les poissons de l\'aquarium',
      story: 'Dans l\'aquarium, il y a 6 poissons rouges et 2 poissons jaunes. Combien y a-t-il de poissons ?',
      first: 6,
      second: 2,
      result: 8,
      item: 'üê†',
      color1: 'text-red-600',
      color2: 'text-amber-600'
    },
    {
      id: 'ecole',
      title: 'La cour de r√©cr√©ation',
      story: 'Pendant la r√©cr√©ation, Julie compte les enfants qui jouent. Elle voit 7 enfants qui jouent au ballon pr√®s du grand ch√™ne et 5 autres enfants qui font de la corde √† sauter pr√®s des bancs. Combien d\'enfants s\'amusent dans la cour ?',
      first: 7,
      second: 5,
      result: 12,
      item: 'üë¶',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    {
      id: 'marche',
      title: 'Au march√© avec Maman',
      story: 'Au march√© du village, Maman ach√®te des l√©gumes frais pour la semaine. Le gentil marchand lui donne 9 tomates bien m√ªres qu\'elle met dans son panier d\'osier, puis il ajoute 6 concombres verts et croquants. Maman veut savoir combien de l√©gumes elle rapporte √† la maison.',
      first: 9,
      second: 6,
      result: 15,
      item: 'üçÖ',
      color1: 'text-red-600',
      color2: 'text-green-600'
    },
    {
      id: 'parc',
      title: 'Les canards du parc',
      story: 'Au parc pr√®s de l\'√©tang, Pablo adore nourrir les canards avec du pain. Ce matin ensoleill√©, il compte 8 canards qui nagent tranquillement pr√®s du petit pont en bois. Soudain, 7 autres canards arrivent en se dandinant depuis les roseaux. Pablo se demande combien de canards vont partager son d√©licieux pain.',
      first: 8,
      second: 7,
      result: 15,
      item: 'ü¶Ü',
      color1: 'text-yellow-600',
      color2: 'text-blue-600'
    },
    {
      id: 'bibliotheque',
      title: 'La grande biblioth√®que de l\'√©cole',
      story: 'Pour organiser la biblioth√®que de l\'√©cole, Madame Dupont compte les livres. Sur l\'√©tag√®re des contes, elle trouve 12 livres d\'aventures poussi√©reux qu\'elle nettoie soigneusement. Puis, dans un carton tout neuf livr√© ce matin, elle d√©couvre 8 magnifiques livres de contes de f√©es avec des couvertures dor√©es. Elle veut savoir combien de livres de contes elle aura en tout pour ses √©l√®ves.',
      first: 12,
      second: 8,
      result: 20,
      item: 'üìö',
      color1: 'text-purple-600',
      color2: 'text-amber-600'
    },
    {
      id: 'patisserie',
      title: 'La boulangerie de Monsieur Paul',
      story: 'Ce matin, dans sa petite boulangerie qui sent bon le pain chaud, Monsieur Paul pr√©pare des croissants pour le petit-d√©jeuner de ses clients fid√®les. Il sort du four 15 croissants dor√©s et croustillants qu\'il place d√©licatement sur un plateau. Ensuite, il pr√©pare une nouvelle fourn√©e et cuit 9 croissants suppl√©mentaires qu\'il dispose sur un second plateau. Madame Martin, sa meilleure cliente, lui demande combien de croissants il a pr√©par√©s ce matin.',
      first: 15,
      second: 9,
      result: 24,
      item: 'ü•ê',
      color1: 'text-amber-700',
      color2: 'text-yellow-600'
    },
    {
      id: 'jardin',
      title: 'Le jardin secret de Grand-Papa',
      story: 'Dans son magnifique jardin fleuri qu\'il cultive avec amour depuis des ann√©es, Grand-Papa plante des tulipes color√©es pour faire une surprise √† sa petite-fille L√©a. Il creuse soigneusement la terre humide et plante 18 bulbes de tulipes rouges pr√®s de la tonnelle en bois. Puis, inspir√© par tant de beaut√©, il se dirige vers le parterre pr√®s de la fontaine et plante 13 bulbes de tulipes jaunes qui brilleront comme des soleils au printemps prochain. L√©a, curieuse, veut savoir combien de tulipes fleuriront dans le jardin.',
      first: 18,
      second: 13,
      result: 31,
      item: 'üå∑',
      color1: 'text-red-700',
      color2: 'text-yellow-700'
    }
  ];

  // 20 Exercices originaux pour les √©l√®ves - NIVEAU CP avec animations de correction
  const exercises = [
    {
      story: 'L√©o a trouv√© 3 champignons rouges et 5 champignons blancs dans la for√™t. Combien de champignons a-t-il trouv√©s ?',
      answer: 8,
      visual: 'üçÑ',
      first: 3,
      second: 5,
      item: 'üçÑ',
      color1: 'text-red-600',
      color2: 'text-gray-600'
    },
    {
      story: 'Dans son pot √† crayons, Nina compte 4 crayons violets et 6 crayons roses. Combien de crayons y a-t-il ?',
      answer: 10,
      visual: '‚úèÔ∏è',
      first: 4,
      second: 6,
      item: '‚úèÔ∏è',
      color1: 'text-purple-600',
      color2: 'text-pink-600'
    },
    {
      story: 'Au cirque, Victor voit 7 clowns qui font des blagues et 2 clowns qui jonglent. Combien de clowns y a-t-il ?',
      answer: 9,
      visual: 'ü§°',
      first: 7,
      second: 2,
      item: 'ü§°',
      color1: 'text-red-500',
      color2: 'text-blue-500'
    },
    {
      story: 'M√©lanie collectionne les papillons. Elle en a 5 bleus dans une bo√Æte et 4 oranges dans une autre. Combien de papillons a-t-elle ?',
      answer: 9,
      visual: 'ü¶ã',
      first: 5,
      second: 4,
      item: 'ü¶ã',
      color1: 'text-blue-600',
      color2: 'text-orange-600'
    },
    {
      story: 'Dans la classe, il y a 12 chaises bleues et 8 chaises rouges. Combien de chaises y a-t-il en tout ?',
      answer: 20,
      visual: 'ü™ë',
      first: 12,
      second: 8,
      item: 'ü™ë',
      color1: 'text-blue-600',
      color2: 'text-red-600'
    },
    {
      story: 'Paul mange des bonbons. Il a 11 bonbons √† la fraise et 7 bonbons au citron. Combien de bonbons a-t-il ?',
      answer: 18,
      visual: 'üç≠',
      first: 11,
      second: 7,
      item: 'üç≠',
      color1: 'text-red-500',
      color2: 'text-yellow-500'
    },
    {
      story: 'Dans le parc, Alice compte les oiseaux. Elle voit 9 moineaux sur l\'arbre et 8 pigeons sur le sol. Combien d\'oiseaux y a-t-il ?',
      answer: 17,
      visual: 'üê¶',
      first: 9,
      second: 8,
      item: 'üê¶',
      color1: 'text-amber-700',
      color2: 'text-gray-600'
    },
    {
      story: 'Thomas joue avec ses dominos. Il a 12 dominos noirs et 6 dominos blancs. Combien de dominos a-t-il ?',
      answer: 18,
      visual: '‚ö´',
      first: 12,
      second: 6,
      item: '‚ö´',
      color1: 'text-black',
      color2: 'text-gray-600'
    },
    {
      story: '√Ä la piscine, Sarah voit 8 enfants qui nagent et 11 enfants qui jouent dans l\'eau. Combien d\'enfants s\'amusent ?',
      answer: 19,
      visual: 'üèä',
      first: 8,
      second: 11,
      item: 'üèä',
      color1: 'text-blue-500',
      color2: 'text-cyan-500'
    },
    {
      story: 'Dans le garage, Papa compte ses outils. Il a 11 marteaux et 9 tournevis. Combien d\'outils y a-t-il ?',
      answer: 20,
      visual: 'üî®',
      first: 11,
      second: 9,
      item: 'üî®',
      color1: 'text-amber-700',
      color2: 'text-gray-600'
    },
    {
      story: 'Julie fait un collier. Elle enfile 12 perles bleues et 7 perles dor√©es. Combien de perles utilise-t-elle ?',
      answer: 19,
      visual: 'üîÆ',
      first: 12,
      second: 7,
      item: 'üîÆ',
      color1: 'text-blue-600',
      color2: 'text-yellow-500'
    },
    {
      story: 'Dans le potager, Mamie r√©colte 9 carottes et 11 radis. Combien de l√©gumes a-t-elle cueillis ?',
      answer: 20,
      visual: 'ü•ï',
      first: 9,
      second: 11,
      item: 'ü•ï',
      color1: 'text-orange-600',
      color2: 'text-red-600'
    },
    {
      story: 'Antoine collectionne les timbres. Il colle 8 timbres fran√ßais et 10 timbres √©trangers dans son album. Combien de timbres a-t-il ?',
      answer: 18,
      visual: 'üìÆ',
      first: 8,
      second: 10,
      item: 'üìÆ',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    {
      story: '√Ä la plage, Zo√© ramasse des galets. Elle trouve 7 galets ronds et 12 galets plats. Combien de galets a-t-elle ?',
      answer: 19,
      visual: 'ü™®',
      first: 7,
      second: 12,
      item: 'ü™®',
      color1: 'text-gray-600',
      color2: 'text-stone-600'
    },
    {
      story: 'Dans sa tirelire, Lucas a 12 pi√®ces de 1 euro et 8 pi√®ces de 2 euros. Combien de pi√®ces a-t-il ?',
      answer: 20,
      visual: 'ü™ô',
      first: 12,
      second: 8,
      item: 'ü™ô',
      color1: 'text-yellow-600',
      color2: 'text-amber-700'
    },
    {
      story: '√âlise compte les nuages dans le ciel. Elle voit 8 gros nuages blancs et 10 petits nuages gris. Combien de nuages y a-t-il ?',
      answer: 18,
      visual: '‚òÅÔ∏è',
      first: 8,
      second: 10,
      item: '‚òÅÔ∏è',
      color1: 'text-gray-600',
      color2: 'text-gray-500'
    },
    {
      story: 'Dans la cuisine, Maman pr√©pare des cookies. Elle fait 11 cookies aux p√©pites et 8 cookies au chocolat. Combien de cookies a-t-elle ?',
      answer: 19,
      visual: 'üç™',
      first: 11,
      second: 8,
      item: 'üç™',
      color1: 'text-amber-600',
      color2: 'text-amber-800'
    },
    {
      story: 'Hugo joue aux cartes. Il a 9 cartes rouges dans une main et 11 cartes noires dans l\'autre. Combien de cartes a-t-il ?',
      answer: 20,
      visual: 'üÇ†',
      first: 9,
      second: 11,
      item: 'üÇ†',
      color1: 'text-red-600',
      color2: 'text-black'
    },
    {
      story: 'Dans son sac d\'√©cole, Emma range 8 livres de math√©matiques et 11 livres de fran√ßais. Combien de livres a-t-elle ?',
      answer: 19,
      visual: 'üìñ',
      first: 8,
      second: 11,
      item: 'üìñ',
      color1: 'text-blue-600',
      color2: 'text-green-600'
    },
    {
      story: 'Au magasin de jouets, Th√©o voit 6 robots rouges et 9 robots verts sur l\'√©tag√®re. Combien de robots y a-t-il ?',
      answer: 15,
      visual: 'ü§ñ',
      first: 6,
      second: 9,
      item: 'ü§ñ',
      color1: 'text-red-600',
      color2: 'text-green-600'
    }
  ];

  // Fonction pour g√©n√©rer un message de correction personnalis√©
  const getPersonalizedFeedback = (exerciseIndex: number, isCorrect: boolean) => {
    const exercise = exercises[exerciseIndex];
    const icon = exercise.visual;
    
    if (isCorrect) {
             const successMessages = [
        `Bravo ! ${icon} L√©o a trouv√© exactement ${exercise.answer} champignons dans la for√™t !`,
        `Parfait ! ${icon} Nina a bien ${exercise.answer} crayons color√©s dans son pot !`,
        `Excellent ! ${icon} Victor compte ${exercise.answer} clowns amusants au cirque !`,
        `Super ! ${icon} M√©lanie a ${exercise.answer} beaux papillons dans sa collection !`,
        `Bravo ! ${icon} Il y a pr√©cis√©ment ${exercise.answer} chaises dans la classe !`,
        `D√©licieux ! ${icon} Paul a ${exercise.answer} bonbons sucr√©s √† savourer !`,
        `Magnifique ! ${icon} Alice observe ${exercise.answer} oiseaux dans le parc !`,
        `Formidable ! ${icon} Thomas a ${exercise.answer} dominos pour jouer !`,
        `Excellent ! ${icon} Sarah voit ${exercise.answer} enfants qui s'amusent √† la piscine !`,
        `Parfait ! ${icon} Papa a ${exercise.answer} outils pratiques dans son garage !`,
        `Merveilleux ! ${icon} Julie utilise ${exercise.answer} perles pour son beau collier !`,
        `Fantastique ! ${icon} Mamie a r√©colt√© ${exercise.answer} l√©gumes frais !`,
        `G√©nial ! ${icon} Antoine a ${exercise.answer} timbres dans sa collection !`,
        `Bravo ! ${icon} Zo√© a ramass√© ${exercise.answer} jolis galets √† la plage !`,
        `Super ! ${icon} Lucas a ${exercise.answer} pi√®ces dans sa tirelire !`,
        `Excellent ! ${icon} √âlise compte ${exercise.answer} nuages dans le ciel !`,
        `D√©licieux ! ${icon} Maman a pr√©par√© ${exercise.answer} cookies savoureux !`,
        `Formidable ! ${icon} Hugo a ${exercise.answer} cartes dans ses mains !`,
        `Parfait ! ${icon} Emma a ${exercise.answer} livres dans son sac d'√©cole !`,
        `Fantastique ! ${icon} Th√©o voit ${exercise.answer} robots fascinants au magasin !`
       ];
       return successMessages[exerciseIndex] || `Bravo ! ${icon} Tu as trouv√© ${exercise.answer} !`;
    } else {
             const correctionMessages = [
        `${icon} L√©o a trouv√© : ${exercise.first} champignons rouges + ${exercise.second} champignons blancs = ${exercise.answer} champignons !`,
        `${icon} Nina a : ${exercise.first} crayons violets + ${exercise.second} crayons roses = ${exercise.answer} crayons !`,
        `${icon} Au cirque : ${exercise.first} clowns blagueurs + ${exercise.second} clowns jongleurs = ${exercise.answer} clowns !`,
        `${icon} M√©lanie a : ${exercise.first} papillons bleus + ${exercise.second} papillons oranges = ${exercise.answer} papillons !`,
        `${icon} Dans la classe : ${exercise.first} chaises bleues + ${exercise.second} chaises rouges = ${exercise.answer} chaises !`,
        `${icon} Paul a : ${exercise.first} bonbons fraise + ${exercise.second} bonbons citron = ${exercise.answer} bonbons !`,
        `${icon} Dans le parc : ${exercise.first} moineaux + ${exercise.second} pigeons = ${exercise.answer} oiseaux !`,
        `${icon} Thomas a : ${exercise.first} dominos noirs + ${exercise.second} dominos blancs = ${exercise.answer} dominos !`,
        `${icon} √Ä la piscine : ${exercise.first} enfants nageurs + ${exercise.second} enfants joueurs = ${exercise.answer} enfants !`,
        `${icon} Papa a : ${exercise.first} marteaux + ${exercise.second} tournevis = ${exercise.answer} outils !`,
        `${icon} Julie utilise : ${exercise.first} perles bleues + ${exercise.second} perles dor√©es = ${exercise.answer} perles !`,
        `${icon} Mamie a r√©colt√© : ${exercise.first} carottes + ${exercise.second} radis = ${exercise.answer} l√©gumes !`,
        `${icon} Antoine a : ${exercise.first} timbres fran√ßais + ${exercise.second} timbres √©trangers = ${exercise.answer} timbres !`,
        `${icon} Zo√© a trouv√© : ${exercise.first} galets ronds + ${exercise.second} galets plats = ${exercise.answer} galets !`,
        `${icon} Lucas a : ${exercise.first} pi√®ces de 1‚Ç¨ + ${exercise.second} pi√®ces de 2‚Ç¨ = ${exercise.answer} pi√®ces !`,
        `${icon} √âlise voit : ${exercise.first} gros nuages + ${exercise.second} petits nuages = ${exercise.answer} nuages !`,
        `${icon} Maman a fait : ${exercise.first} cookies p√©pites + ${exercise.second} cookies chocolat = ${exercise.answer} cookies !`,
        `${icon} Hugo a : ${exercise.first} cartes rouges + ${exercise.second} cartes noires = ${exercise.answer} cartes !`,
        `${icon} Emma a : ${exercise.first} livres de maths + ${exercise.second} livres de fran√ßais = ${exercise.answer} livres !`,
        `${icon} Th√©o voit : ${exercise.first} robots rouges + ${exercise.second} robots verts = ${exercise.answer} robots !`
       ];
      return correctionMessages[exerciseIndex] || `${icon} La r√©ponse √©tait ${exercise.answer} !`;
    }
  };

  // Fonction pour mettre en √©vidence les nombres dans un texte
  const highlightNumbers = (text: string, isExplicitHighlight = false) => {
    // Remplace les nombres et signes math√©matiques par des spans color√©s (SANS les tirets -)
    return text.split(/(\d+|\+|=)/).map((part, index) => {
      // Si c'est un nombre
      if (/^\d+$/.test(part)) {
        const className = isExplicitHighlight 
          ? "bg-yellow-300 text-yellow-900 px-2 py-1 rounded-lg font-black text-xl mx-1 shadow-lg ring-2 ring-yellow-400 animate-pulse"
          : "bg-blue-200 text-blue-800 px-1.5 py-0.5 rounded-md font-bold mx-0.5 shadow-sm";
        return (
          <span 
            key={index} 
            className={className}
          >
            {part}
          </span>
        );
      }
      // Si c'est un signe math√©matique (+ ou = seulement, PAS -)
      if (/^[\+\=]$/.test(part)) {
        const className = isExplicitHighlight
          ? "bg-orange-300 text-orange-900 px-2 py-1 rounded-lg font-black text-xl mx-1 shadow-lg ring-2 ring-orange-400 animate-pulse"
          : "bg-orange-200 text-orange-800 px-1.5 py-0.5 rounded-md font-bold mx-0.5 shadow-sm";
        return (
          <span 
            key={index} 
            className={className}
          >
            {part}
          </span>
        );
      }
      return part;
    });
  };

  // Fonction pour arr√™ter tous les vocaux et animations
  const stopAllVocalsAndAnimations = () => {
    console.log('üõë Arr√™t de tous les vocaux et animations');
    stopSignalRef.current = true;
    
    // Arr√™ter compl√®tement la synth√®se vocale
    if (speechSynthesis.speaking || speechSynthesis.pending) {
      speechSynthesis.cancel();
      console.log('üîá speechSynthesis.cancel() appel√©');
    }
    
    if (currentAudioRef.current) {
      currentAudioRef.current = null;
    }
    
    setIsPlayingVocal(false);
    setExercisesIsPlayingVocal(false);
    setIsAnimationRunning(false);
    setHighlightedElement(null);
    setAnimatingStep(null);
    setCurrentExample(null);
    setHighlightedExamples([]);
    setHighlightNumbersInStory(false);
    setSamSizeExpanded(false);
    setHighlightCourseButton(false);
    setHighlightExerciseButton(false);
  };

  // Fonction pour faire d√©filer vers une section
  const scrollToSection = (ref: React.RefObject<HTMLElement>) => {
    if (ref.current) {
      ref.current.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center',
        inline: 'nearest'
      });
    }
  };

  // Fonction pour jouer l'audio avec voix f√©minine fran√ßaise
  const playAudio = async (text: string, slowMode = false) => {
    return new Promise<void>((resolve) => {
      if (stopSignalRef.current) {
        resolve();
        return;
      }
      
      setIsPlayingVocal(true);
      const utterance = new SpeechSynthesisUtterance(text);
      
      utterance.lang = 'fr-FR';
      utterance.rate = slowMode ? 0.6 : 0.8;
      utterance.pitch = 1.0;
      utterance.volume = 1.0;

      // S√©lectionner la MEILLEURE voix fran√ßaise f√©minine disponible
      const voices = speechSynthesis.getVoices();
      console.log('Voix disponibles:', voices.map(v => `${v.name} (${v.lang}) ${v.default ? '‚úì' : ''}`));
      
      // Priorit√© aux voix F√âMININES fran√ßaises de qualit√©
      const bestFrenchVoice = voices.find(voice => 
        (voice.lang === 'fr-FR' || voice.lang === 'fr') && 
        (voice.name.toLowerCase().includes('audrey') ||    
         voice.name.toLowerCase().includes('marie') ||     
         voice.name.toLowerCase().includes('am√©lie') ||    
         voice.name.toLowerCase().includes('virginie') ||  
         voice.name.toLowerCase().includes('julie') ||     
         voice.name.toLowerCase().includes('celine') ||    
         voice.name.toLowerCase().includes('l√©a') ||       
         voice.name.toLowerCase().includes('charlotte'))   
      ) || voices.find(voice => 
        (voice.lang === 'fr-FR' || voice.lang === 'fr') && 
        voice.localService                                 
      ) || voices.find(voice => 
        voice.lang === 'fr-FR'                            
      ) || voices.find(voice => 
        voice.lang.startsWith('fr')                       
      );

      if (bestFrenchVoice) {
        utterance.voice = bestFrenchVoice;
        console.log('üé§ Voix s√©lectionn√©e:', bestFrenchVoice.name);
      } else {
        console.warn('‚ö†Ô∏è Aucune voix fran√ßaise trouv√©e');
      }
      
      utterance.onend = () => {
        setIsPlayingVocal(false);
        currentAudioRef.current = null;
        resolve();
      };
      
      utterance.onerror = () => {
        setIsPlayingVocal(false);
        currentAudioRef.current = null;
        resolve();
      };
      
      currentAudioRef.current = utterance;
      speechSynthesis.speak(utterance);
    });
  };

  // Fonction pour attendre
  const wait = async (ms: number) => {
    return new Promise<void>((resolve) => {
      setTimeout(() => {
        if (stopSignalRef.current) {
          resolve();
          return;
        }
        resolve();
      }, ms);
    });
  };

    // Fonction pour faire d√©filer vers un √©l√©ment par ID (pour compatibilit√©)
  const scrollToElement = (elementId: string) => {
    setTimeout(() => {
      const element = document.getElementById(elementId);
      if (element) {
        element.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center',
          inline: 'nearest' 
        });
      }
    }, 300);
  };

  // Fonction pour expliquer le chapitre dans le cours avec Sam
  const explainChapterWithSam = async () => {
    if (isPlayingVocal) return;
    
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsPlayingVocal(true);
    setHasStarted(true);
    setSamSizeExpanded(true);
    setHighlightCourseButton(true);
    
    try {
      // Introduction et objectif
      await playAudio("Ahoy moussaillon ! Bienvenue dans l'aventure des probl√®mes d'addition !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      await playAudio("Aujourd'hui, tu vas apprendre √† √™tre un vrai d√©tective des nombres !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation de la premi√®re section
      await playAudio("D'abord, nous allons voir ce qu'est un probl√®me d'addition...");
      if (stopSignalRef.current) return;
      
      // Scroll vers l'introduction et surbrillance
      scrollToSection(introSectionRef);
      setHighlightedElement('intro');
      await wait(500);
      
      await playAudio("Regarde bien cette section ! Tu peux cliquer sur l'ic√¥ne pour voir une animation !");
      if (stopSignalRef.current) return;
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation de la m√©thode
      await playAudio("Ensuite, nous verrons la m√©thode en 3 √©tapes...");
      if (stopSignalRef.current) return;
      
      // Scroll vers la m√©thode et surbrillance
      scrollToSection(methodSectionRef);
      setHighlightedElement('method');
      await wait(500);
      
      await playAudio("Voici la m√©thode secr√®te des pirates ! N'oublie pas de tester l'animation !");
      if (stopSignalRef.current) return;
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Pr√©sentation des exemples
      await playAudio("Et enfin, nous pratiquerons avec plein d'exemples...");
      if (stopSignalRef.current) return;
      
      // Scroll vers les exemples et surbrillance
      scrollToSection(examplesSectionRef);
      setHighlightedElement('examples');
      await wait(500);
      
      await playAudio("Ici tu trouveras 9 exemples avec des animations pour bien comprendre !");
      if (stopSignalRef.current) return;
      
      await wait(2000);
      if (stopSignalRef.current) return;
      
      // Mention de la section exercices
      await playAudio("Quand tu seras pr√™t, tu pourras aussi aller √† la section exercices...");
      if (stopSignalRef.current) return;
      
      // Scroll vers l'onglet exercices et surbrillance
      setHighlightedElement(null);
      setHighlightExerciseButton(true);
      if (exerciseTabRef.current) {
        exerciseTabRef.current.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }
      await wait(500);
      
      await playAudio("L√†-bas, 20 probl√®mes t'attendent pour tester tes nouvelles comp√©tences !");
      if (stopSignalRef.current) return;
      
      await wait(1500);
      if (stopSignalRef.current) return;
      
      // Encouragement final
      await playAudio("Bon courage, petit pirate ! L'aventure commence maintenant !");
      if (stopSignalRef.current) return;
      
    } catch (error) {
      console.error('Erreur dans explainChapterWithSam:', error);
    } finally {
      setIsPlayingVocal(false);
      setSamSizeExpanded(false);
      setHighlightCourseButton(false);
      setHighlightExerciseButton(false);
      setHighlightedElement(null);
    }
  };

  // Fonction pour lire l'√©nonc√© de l'exercice actuel
  const readCurrentStory = () => {
    const currentStory = exercises[currentExercise].story;
    const utterance = new SpeechSynthesisUtterance(currentStory);
    utterance.lang = 'fr-FR';
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 1.0;
    
    const voices = speechSynthesis.getVoices();
    const frenchVoice = voices.find(voice => 
      voice.lang === 'fr-FR' && voice.localService === true
    );
    
    if (frenchVoice) {
      utterance.voice = frenchVoice;
    }
    
    speechSynthesis.speak(utterance);
  };

  // Fonction pour expliquer les exercices avec Sam
  const explainExercisesWithSam = async () => {
    if (exercisesIsPlayingVocal) return;
    
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setExercisesIsPlayingVocal(true);
    setExercisesHasStarted(true);
    setSamSizeExpanded(true);
    setHighlightExerciseButton(true);
    
    try {
      await playAudio("Ahoy moussaillon ! C'est l'heure de t'entra√Æner avec les exercices !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      await playAudio("Tu vas r√©soudre 20 probl√®mes d'addition diff√©rents, nom d'un sabre !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence le bouton "Lire l'√©nonc√©"
      setHighlightedElement('read-story-button');
      await playAudio("Pour chaque exercice, tu peux lire l'√©nonc√© en cliquant sur le bouton 'Lire l'√©nonc√©' !");
      if (stopSignalRef.current) return;
      
      await wait(1500);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence la zone de r√©ponse
      setHighlightedElement('answer-input');
      await playAudio("Ensuite, tu saisis ta r√©ponse dans la zone de r√©ponse !");
      if (stopSignalRef.current) return;
      
      await wait(1200);
      if (stopSignalRef.current) return;
      
      // Mettre en √©vidence le bouton V√©rifier
      setHighlightedElement('validate-button');
      await playAudio("Et pour finir, tu appuies sur le bouton 'V√©rifier' pour v√©rifier ta r√©ponse !");
      if (stopSignalRef.current) return;
      
      await wait(1000);
      if (stopSignalRef.current) return;
      
      setHighlightedElement(null);
      await playAudio("Si tu te trompes, je t'aiderai avec une animation pour comprendre ! En avant, petit pirate !");
      if (stopSignalRef.current) return;
      
    } catch (error) {
      console.error('Erreur dans explainExercisesWithSam:', error);
    } finally {
      setExercisesIsPlayingVocal(false);
      setSamSizeExpanded(false);
      setHighlightExerciseButton(false);
      setHighlightedElement(null);
    }
  };

  // Fonction pour expliquer le chapitre principal
  const explainChapter = async () => {
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsAnimationRunning(true);
    setHasStarted(true);

    try {
      // Introduction
      setHighlightedElement('intro');
      scrollToElement('intro-section');
      await playAudio("Bonjour ! Aujourd'hui, nous allons apprendre √† r√©soudre des probl√®mes d'addition. C'est tr√®s important de savoir transformer une histoire en calcul !");
      await wait(500);

      if (stopSignalRef.current) return;

      // M√©thode
      setHighlightedElement('method');
      scrollToElement('method-section');
      await playAudio("Pour r√©soudre un probl√®me d'addition, il faut suivre 3 √©tapes importantes :");
      await wait(300);

      // √âtape 1
      setAnimatingStep('step1');
      await playAudio("Premi√®re √©tape : je lis le probl√®me et je comprends l'histoire.");
      await wait(500);

      if (stopSignalRef.current) return;

      // √âtape 2
      setAnimatingStep('step2');
      await playAudio("Deuxi√®me √©tape : je trouve les deux nombres √† additionner dans l'histoire.");
      await wait(500);

      if (stopSignalRef.current) return;

      // D√©monstration du soulignage des nombres
      setHighlightNumbersInStory(true);
      await playAudio("Regardez ! Je souligne tous les nombres que je trouve pour les rep√©rer facilement !");
      await wait(1000);

      if (stopSignalRef.current) return;

      await playAudio("Voyez-vous comme les nombres ressortent bien ? C'est plus facile de les voir maintenant !");
      await wait(1000);

      if (stopSignalRef.current) return;

      setHighlightNumbersInStory(false);
      await wait(300);

      // √âtape 3
      setAnimatingStep('step3');
      await playAudio("Troisi√®me √©tape : j'√©cris l'addition et je calcule le r√©sultat !");
      await wait(800);

      if (stopSignalRef.current) return;

      // Transition vers les exemples
      setHighlightedElement('examples');
      scrollToElement('examples-section');
      await playAudio("Maintenant, regardons des exemples ensemble !");
      await wait(300);

      if (stopSignalRef.current) return;

      // Illuminer quelques exemples pendant l'explication  
      setHighlightedExamples([0, 2, 4]); // Illuminer bonbons, cour, march√©
      await playAudio("Tu peux choisir celui que tu pr√©f√®res pour voir l'animation d√©taill√©e !");
      await wait(1000);

      if (stopSignalRef.current) return;

      // Changer d'exemples illumin√©s pour montrer la vari√©t√©
      setHighlightedExamples([1, 5, 8]); // Illuminer voitures, canards, boulangerie
      await wait(800);

      // Arr√™ter l'illumination
      setHighlightedExamples([]);

    } finally {
      setHighlightedElement(null);
      setAnimatingStep(null);
      setHighlightNumbersInStory(false);
      setIsAnimationRunning(false);
    }
  };

  // Fonction pour expliquer un exemple sp√©cifique
  const explainSpecificExample = async (index: number) => {
    stopAllVocalsAndAnimations();
    await wait(300);
    stopSignalRef.current = false;
    setIsAnimationRunning(true);
    
    const example = problemExamples[index];
    setCurrentExample(index);

    try {
      // Scroll vers la zone d'animation
      scrollToElement('animation-section');
      await wait(500);

      // Lecture du probl√®me
      setHighlightedElement('story');
      await playAudio(example.story);
      await wait(800);

      if (stopSignalRef.current) return;

      // Identifier les nombres - Phase 1 : Soulignage
      setAnimatingStep('identify');
      setHighlightNumbersInStory(true);
      await playAudio("Premi√®re chose √† faire : je souligne tous les nombres que je vois dans l'histoire !");
      await wait(1000);

      if (stopSignalRef.current) return;

      await playAudio(`Parfait ! J'ai soulign√© les nombres : ${example.first} et ${example.second}. Ce sont mes deux nombres importants !`);
      await wait(1000);

      if (stopSignalRef.current) return;

      setHighlightNumbersInStory(false);
      await wait(300);

      // Montrer les objets du premier groupe
      setAnimatingStep('group1');
      await playAudio(`Voici les ${example.first} premiers objets.`);
      await wait(1000);

      if (stopSignalRef.current) return;

      // Montrer les objets du deuxi√®me groupe
      setAnimatingStep('group2');
      await playAudio(`Et voici les ${example.second} autres objets.`);
      await wait(1000);

      if (stopSignalRef.current) return;

      // Calcul
      setAnimatingStep('calculation');
      await playAudio(`Pour trouver le total, je fais l'addition : ${example.first} plus ${example.second} √©gale ${example.result}.`);
      await wait(800);

      if (stopSignalRef.current) return;

      // R√©sultat final
      setAnimatingStep('result');
      await playAudio(`La r√©ponse est ${example.result} ! Bravo !`);
      await wait(1000);

    } finally {
      setHighlightedElement(null);
      setAnimatingStep(null);
      setCurrentExample(null);
      setHighlightNumbersInStory(false);
      setIsAnimationRunning(false);
    }
  };

  // Fonction pour les exercices
  const checkAnswer = () => {
    const userNum = parseInt(userAnswer);
    const correct = userNum === exercises[currentExercise].answer;
    setIsCorrect(correct);
    
    if (correct) {
      setScore(score + 1);
    } else {
      // D√©clencher la correction vocale automatique et l'animation visuelle
      setShowExerciseAnimation(true);
      quickVocalCorrection();
      animateExerciseCorrection();
    }
  };

  // Fonction pour correction vocale automatique
  const quickVocalCorrection = async () => {
    const exercise = exercises[currentExercise];
    
    // Extraire les nombres de l'√©nonc√©
    const numbers = exercise.story.match(/\d+/g);
    if (!numbers || numbers.length < 2) return;
    
    const first = parseInt(numbers[0]);
    const second = parseInt(numbers[1]);
    const result = exercise.answer;

    // Scroll vers la zone de correction
    setTimeout(() => {
      const correctionElement = document.getElementById('exercise-correction');
      if (correctionElement) {
        correctionElement.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }
    }, 300);

    // Fonction audio avec vitesse normale pour la correction
    const quickAudio = (text: string) => {
      return new Promise<void>((resolve) => {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'fr-FR';
        utterance.rate = 1.0; // Vitesse normale
        utterance.pitch = 1.0;
        utterance.volume = 1.0;
        
        const voices = speechSynthesis.getVoices();
        const frenchVoice = voices.find(voice => 
          voice.lang === 'fr-FR' && voice.localService === true
        );
        
        if (frenchVoice) {
          utterance.voice = frenchVoice;
        }
        
        utterance.onend = () => resolve();
        utterance.onerror = () => resolve();
        speechSynthesis.speak(utterance);
      });
    };

    try {
      // Correction avec mise en √©vidence et vitesse normale
      setExerciseAnimationStep('highlight-numbers');
      await quickAudio(`Les nombres sont ${first} et ${second}`);
      await wait(500);
      
      setExerciseAnimationStep('show-calculation');
      await quickAudio(`${first} plus ${second} √©gale ${result}`);
      await wait(500);
      
      setExerciseAnimationStep('show-result');
      await quickAudio(`La bonne r√©ponse est ${result} !`);
      await wait(800);
      
      setExerciseAnimationStep(null);
      
    } catch (error) {
      console.error('Erreur dans quickVocalCorrection:', error);
    }
  };

  // Fonction pour animer la correction de l'exercice
  const animateExerciseCorrection = async () => {
    try {
      await wait(500);
      setExerciseAnimationStep('highlight-numbers');
      await wait(2000);
      setExerciseAnimationStep('show-groups');
      await wait(2000);
      setExerciseAnimationStep('show-calculation');
      await wait(2000);
      setExerciseAnimationStep('show-result');
      // Ne pas remettre √† null pour garder l'animation visible
    } catch (error) {
      console.error('Erreur dans animateExerciseCorrection:', error);
      setExerciseAnimationStep(null);
      setShowExerciseAnimation(false);
    }
  };

  const nextExercise = () => {
    if (currentExercise < exercises.length - 1) {
      setCurrentExercise(currentExercise + 1);
      setUserAnswer('');
      setIsCorrect(null);
      setShowExerciseAnimation(false);
      setExerciseAnimationStep(null);
    } else {
      setShowCompletionModal(true);
    }
  };

  const resetExercises = () => {
    setCurrentExercise(0);
    setUserAnswer('');
    setIsCorrect(null);
    setScore(0);
    setShowCompletionModal(false);
    setShowExerciseAnimation(false);
    setExerciseAnimationStep(null);
    setExercisesHasStarted(false);
    setExercisesIsPlayingVocal(false);
  };

  // Gestion des √©v√©nements pour arr√™ter les vocaux
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        stopAllVocalsAndAnimations();
      }
    };

    const handleBeforeUnload = () => {
      stopAllVocalsAndAnimations();
    };

    const handlePopState = () => {
      stopAllVocalsAndAnimations();
    };

    // Event listeners
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('pagehide', handleBeforeUnload);
    window.addEventListener('popstate', handlePopState);

    // Override history methods
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = function(...args) {
      stopAllVocalsAndAnimations();
      return originalPushState.apply(history, args);
    };
    
    history.replaceState = function(...args) {
      stopAllVocalsAndAnimations();
      return originalReplaceState.apply(history, args);
    };

    return () => {
      stopAllVocalsAndAnimations();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('pagehide', handleBeforeUnload);
      window.removeEventListener('popstate', handlePopState);
      history.pushState = originalPushState;
      history.replaceState = originalReplaceState;
    };
  }, []);

  // Effet pour g√©rer les changements d'onglet interne (cours ‚Üî exercices)
  useEffect(() => {
    stopAllVocalsAndAnimations();
  }, [showExercises]);

  // Fonction pour rendre les objets avec animations
  const renderObjects = (count: number, item: string, colorClass: string) => {
    return Array.from({ length: count }, (_, i) => (
      <div
        key={i}
        className={`text-3xl ${colorClass} transition-all duration-500 transform ${
          animatingStep === 'group1' || animatingStep === 'group2' ? 'animate-bounce' : ''
        }`}
        style={{ animationDelay: `${i * 100}ms` }}
      >
        {item}
      </div>
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-100">
      {/* Animation CSS personnalis√©e pour les ic√¥nes */}
      <style dangerouslySetInnerHTML={{
        __html: `
          @keyframes subtle-glow {
            0%, 100% {
              opacity: 0.8;
              transform: scale(1);
              filter: brightness(1);
            }
            50% {
              opacity: 1;
              transform: scale(1.05);
              filter: brightness(1.1);
            }
          }
        `
      }} />
      

      
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <Link 
            href="/chapitre/cp-additions-simples" 
            onClick={stopAllVocalsAndAnimations}
            className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Retour au chapitre</span>
          </Link>
          
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              üßÆ Probl√®mes d'addition
            </h1>
            <p className="text-lg text-gray-600">
              Apprendre √† r√©soudre des probl√®mes avec des histoires
            </p>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex justify-center space-x-4 mb-8">
          <button
            onClick={() => {
              stopAllVocalsAndAnimations();
              setShowExercises(false);
            }}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              !showExercises
                ? 'bg-orange-600 text-white shadow-lg'
                : 'bg-white text-orange-600 hover:bg-orange-50'
            } ${highlightCourseButton ? 'ring-4 ring-orange-400 animate-pulse scale-105' : ''}`}
          >
            üìö Cours
          </button>
          <button
            ref={exerciseTabRef}
            onClick={() => {
              stopAllVocalsAndAnimations();
              setShowExercises(true);
            }}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              showExercises
                ? 'bg-orange-600 text-white shadow-lg'
                : 'bg-white text-orange-600 hover:bg-orange-50'
            } ${highlightExerciseButton ? 'ring-4 ring-blue-400 animate-pulse scale-105' : ''}`}
          >
            üéØ Exercices
          </button>
        </div>

        {/* Bouton Stop unique avec Sam - visible quand une animation est en cours */}
        {(isPlayingVocal || exercisesIsPlayingVocal || isAnimationRunning) && (
          <div className="fixed top-20 right-4 z-10 animate-fade-in">
            <button
              onClick={stopAllVocalsAndAnimations}
              className="flex items-center gap-2 px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg shadow-lg transition-all hover:scale-105"
            >
              <div className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
                {!imageError && (
                  <img
                    src="/images/pirate-small.png"
                    alt="Sam le Pirate"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-sm">üè¥‚Äç‚ò†Ô∏è</div>
                )}
              </div>
              <span className="font-semibold text-sm">Stop</span> 
              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <rect x="6" y="4" width="2" height="12" />
                <rect x="12" y="4" width="2" height="12" />
              </svg>
            </button>
          </div>
        )}

        {!showExercises ? (
          /* COURS - MOBILE OPTIMIS√â */
          <div className="space-y-2 sm:space-y-6">
            {/* Image de Sam le Pirate avec bouton D√âMARRER */}
            <div className="flex items-center justify-center gap-2 sm:gap-4 p-2 sm:p-4 mb-3 sm:mb-6">
              {/* Image de Sam le Pirate */}
              <div className={`relative transition-all duration-500 border-2 border-orange-300 rounded-full bg-gradient-to-br from-orange-100 to-red-100 ${
                isPlayingVocal
                    ? 'w-14 sm:w-24 h-14 sm:h-24' // When speaking - plus petit sur mobile
                  : samSizeExpanded
                      ? 'w-12 sm:w-32 h-12 sm:h-32' // Enlarged - plus petit sur mobile
                      : 'w-10 sm:w-20 h-10 sm:h-20' // Normal - plus petit sur mobile
              } flex items-center justify-center hover:scale-105 cursor-pointer`}>
                {!imageError && (
                  <img 
                    src="/images/pirate-small.png"
                    alt="Sam le Pirate"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-lg sm:text-2xl">üè¥‚Äç‚ò†Ô∏è</div>
                )}
                
                {/* Megaphone anim√© quand Sam parle */}
                {isPlayingVocal && (
                  <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 rounded-full p-1 sm:p-2 shadow-lg animate-bounce">
                    <svg className="w-2 h-2 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h3.763l7.79 3.894A1 1 0 0018 15V3zM14 8.59c0 1.2.8 2.27 2 2.27v.64c-1.77 0-3.2-1.4-3.2-3.14 0-1.74 1.43-3.14 3.2-3.14v.64c-1.2 0-2 1.07-2 2.27z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>

              {/* Bouton D√âMARRER avec Sam */}
              <button
                onClick={explainChapterWithSam}
                disabled={isPlayingVocal}
                className={`px-3 sm:px-6 py-2 sm:py-3 rounded-lg font-bold text-sm sm:text-lg shadow-lg transition-all ${
                  isPlayingVocal
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:shadow-xl hover:scale-105'
                } ${!hasStarted && !isPlayingVocal ? 'animate-pulse' : ''}`}
              >
                <Play className="w-3 h-3 sm:w-5 sm:h-5 inline-block mr-1 sm:mr-2" />
                {isPlayingVocal ? 'Sam explique...' : 'D√âMARRER'}
              </button>
            </div>



            {/* Introduction */}
            <div 
              ref={introSectionRef}
              id="intro-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'intro' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-4">
                <div className="p-1 sm:p-2 bg-orange-100 rounded-lg">
                  <Book className="w-4 h-4 sm:w-6 sm:h-6 text-orange-600" />
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">Qu'est-ce qu'un probl√®me d'addition ?</h2>
                {/* Ic√¥ne d'animation pour l'introduction */}
                <div className={`bg-gradient-to-r from-orange-500 to-red-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-orange-300 ${
                  highlightedElement === 'intro' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                }`} 
                     style={{animation: 'subtle-glow 2s infinite'}}>
                  üßÆ
                </div>
              </div>
              <p className="text-sm sm:text-lg text-gray-700 leading-relaxed">
                Un probl√®me d'addition raconte une histoire avec des nombres. 
                Notre mission est de trouver ces nombres et de les additionner pour r√©pondre √† la question !
              </p>
            </div>

            {/* M√©thode */}
            <div 
              ref={methodSectionRef}
              id="method-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'method' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <div className="p-1 sm:p-2 bg-purple-100 rounded-lg">
                  <Target className="w-4 h-4 sm:w-6 sm:h-6 text-purple-600" />
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">Ma m√©thode en 3 √©tapes</h2>
                {/* Ic√¥ne d'animation pour la m√©thode */}
                <div className={`bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-purple-300 ${
                  highlightedElement === 'method' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                }`} 
                     style={{animation: 'subtle-glow 2s infinite'}}>
                  üéØ
                </div>
              </div>
              
              <div className="space-y-4">
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step1' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'
                }`}>
                  <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">1</div>
                  <p className="text-lg text-gray-800">Je lis le probl√®me et je comprends l'histoire</p>
                </div>
                
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step2' ? 'bg-green-100 ring-2 ring-green-400' : 'bg-gray-100'
                }`}>
                  <div className="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold">2</div>
                  <p className="text-lg text-gray-800">Je trouve les deux nombres √† additionner</p>
                </div>
                
                <div className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                  animatingStep === 'step3' ? 'bg-purple-100 ring-2 ring-purple-400' : 'bg-gray-100'
                }`}>
                  <div className="w-8 h-8 bg-purple-500 text-white rounded-full flex items-center justify-center font-bold">3</div>
                  <p className="text-lg text-gray-800">J'√©cris l'addition et je calcule</p>
                </div>
              </div>
            </div>

            {/* D√©monstration du soulignage */}
            <div className="bg-white rounded-xl shadow-lg p-3 sm:p-6">
              <div className="flex items-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <div className="p-1 sm:p-2 bg-yellow-100 rounded-lg">
                  <span className="text-lg sm:text-2xl">‚úèÔ∏è</span>
                </div>
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">D√©monstration : souligner les nombres</h2>
              </div>
              
              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded-lg">
                  <p className="text-lg font-semibold text-gray-800 mb-3">Exemple d'histoire :</p>
                  <div className="text-lg text-gray-700 p-3 bg-white rounded border">
                    {highlightNumbers("Marie a 3 bonbons rouges et 4 bonbons bleus. Combien a-t-elle de bonbons en tout ?", highlightNumbersInStory)}
                  </div>
                </div>
                
                {highlightNumbersInStory && (
                  <div className="text-center p-4 bg-yellow-50 border-2 border-yellow-200 rounded-lg">
                    <p className="text-lg text-yellow-800 font-semibold">
                      üéØ Voyez comme les nombres <span className="bg-yellow-300 px-2 py-1 rounded font-black">3</span> et <span className="bg-yellow-300 px-2 py-1 rounded font-black">4</span> ressortent bien !
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Exemples */}
            <div 
              ref={examplesSectionRef}
              id="examples-section"
              className={`bg-white rounded-xl shadow-lg p-3 sm:p-6 transition-all duration-300 ${
                highlightedElement === 'examples' ? 'ring-4 ring-orange-400 bg-orange-50' : ''
              }`}
            >
              <div className="flex items-center justify-center gap-1 sm:gap-3 mb-3 sm:mb-6">
                <h2 className="text-base sm:text-2xl font-bold text-gray-800">
                  üéØ Choisis un probl√®me √† r√©soudre ensemble !
                </h2>
                {/* Ic√¥ne d'animation pour les exemples */}
                <div className={`bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-full w-6 h-6 sm:w-12 sm:h-12 flex items-center justify-center text-xs sm:text-xl font-bold shadow-lg hover:scale-110 cursor-pointer transition-all duration-300 ring-2 ring-green-300 ${
                  highlightedElement === 'examples' ? 'ring-4 ring-yellow-400 animate-bounce scale-110' : ''
                }`} 
                     style={{animation: 'subtle-glow 2s infinite'}}>
                  üéØ
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {problemExamples.map((example, index) => (
                  <div 
                    key={index}
                    className={`bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg p-6 transition-all duration-300 ${
                      isAnimationRunning 
                        ? 'opacity-50 cursor-not-allowed' 
                        : 'cursor-pointer hover:scale-105 hover:shadow-lg'
                    } ${currentExample === index ? 'ring-4 ring-purple-400 bg-purple-100' : ''} ${
                      highlightedExamples.includes(index) ? 'ring-4 ring-orange-400 bg-orange-100 animate-pulse' : ''
                    }`}
                    onClick={isAnimationRunning ? undefined : () => explainSpecificExample(index)}
                  >
                    <div className="text-center">
                      <div className="text-4xl mb-2">{example.item}</div>
                      <h3 className="font-bold text-lg text-gray-800 mb-2">{example.title}</h3>
                      <div className="text-sm text-gray-600 mb-4">
                        {example.story}
                      </div>
                      <div className={`px-3 py-1 rounded-lg text-sm transition-all ${
                        highlightedExamples.includes(index) 
                          ? 'bg-orange-500 text-white animate-bounce shadow-lg ring-2 ring-orange-300' 
                          : 'bg-blue-500 text-white hover:bg-blue-600'
                      }`}>
                        ‚ñ∂Ô∏è Voir l'animation
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Zone d'animation */}
            {currentExample !== null && (
              <div 
                id="animation-section"
                className="bg-white rounded-xl shadow-lg p-6"
              >
                <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
                  üé¨ Animation du probl√®me
                </h2>
                
                {(() => {
                  const example = problemExamples[currentExample];
                  return (
                    <div className="space-y-6">
                      {/* Histoire */}
                      <div className={`p-4 rounded-lg text-center ${
                        highlightedElement === 'story' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'
                      }`}>
                        <div className="text-lg font-semibold text-gray-800">
                          {highlightNumbers(example.story, highlightNumbersInStory)}
                        </div>
                      </div>

                      {/* Identification des nombres */}
                      {animatingStep === 'identify' && (
                        <div className="text-center p-4 bg-yellow-100 rounded-lg">
                          <p className="text-lg text-yellow-800">
                            Je trouve les nombres : <span className="font-bold text-blue-600">{example.first}</span> et <span className="font-bold text-green-600">{example.second}</span>
                          </p>
                        </div>
                      )}

                      {/* Animation des objets */}
                      <div className="flex justify-center items-center space-x-8">
                        {/* Premier groupe */}
                        {(animatingStep === 'group1' || animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                          <div className={`p-4 rounded-lg ${animatingStep === 'group1' ? 'bg-red-100 ring-2 ring-red-400' : 'bg-gray-100'}`}>
                            <div className="text-center mb-2">
                              <span className="font-bold text-gray-800">{example.first}</span>
                            </div>
                            <div className="grid grid-cols-3 gap-2">
                              {renderObjects(example.first, example.item, example.color1)}
                            </div>
                          </div>
                        )}

                        {/* Signe + */}
                        {(animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                          <div className="text-4xl font-bold text-gray-700">+</div>
                        )}

                        {/* Deuxi√®me groupe */}
                        {(animatingStep === 'group2' || animatingStep === 'calculation' || animatingStep === 'result') && (
                          <div className={`p-4 rounded-lg ${animatingStep === 'group2' ? 'bg-blue-100 ring-2 ring-blue-400' : 'bg-gray-100'}`}>
                            <div className="text-center mb-2">
                              <span className="font-bold text-gray-800">{example.second}</span>
                            </div>
                            <div className="grid grid-cols-3 gap-2">
                              {renderObjects(example.second, example.item, example.color2)}
                            </div>
                          </div>
                        )}

                        {/* Signe = et r√©sultat */}
                        {(animatingStep === 'calculation' || animatingStep === 'result') && (
                          <>
                            <div className="text-4xl font-bold text-gray-700">=</div>
                            <div className={`p-4 rounded-lg ${animatingStep === 'result' ? 'bg-green-100 ring-2 ring-green-400 animate-pulse' : 'bg-gray-100'}`}>
                              <div className="text-center mb-2">
                                <span className="font-bold text-2xl text-gray-800">{example.result}</span>
                              </div>
                              {animatingStep === 'result' && (
                                <div className="grid grid-cols-4 gap-2">
                                  {renderObjects(example.result, example.item, 'text-green-600')}
                                </div>
                              )}
                            </div>
                          </>
                        )}
                      </div>

                      {/* Calcul √©crit */}
                      {(animatingStep === 'calculation' || animatingStep === 'result') && (
                        <div className="text-center p-4 bg-purple-100 rounded-lg">
                          <div className="text-2xl font-bold text-purple-800">
                            {highlightNumbers(`${example.first} + ${example.second} = ${example.result}`)}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })()}
              </div>
            )}
          </div>
        ) : (
          /* Section Exercices */
          <div className="space-y-6">
            {/* Image de Sam le Pirate avec bouton D√âMARRER pour les exercices */}
            <div className="flex items-center justify-center gap-2 sm:gap-4 p-2 sm:p-4 mb-3 sm:mb-6">
              {/* Image de Sam le Pirate */}
              <div className={`relative transition-all duration-500 border-2 border-blue-300 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 ${
                exercisesIsPlayingVocal
                    ? 'w-14 sm:w-24 h-14 sm:h-24' // When speaking - plus petit sur mobile
                  : samSizeExpanded
                      ? 'w-12 sm:w-32 h-12 sm:h-32' // Enlarged - plus petit sur mobile
                      : 'w-10 sm:w-20 h-10 sm:h-20' // Normal - plus petit sur mobile
              } flex items-center justify-center hover:scale-105 cursor-pointer`}>
                {!imageError && (
                  <img 
                    src="/images/pirate-small.png"
                    alt="Sam le Pirate"
                    className="w-full h-full object-cover rounded-full"
                    onError={() => setImageError(true)}
                  />
                )}
                {imageError && (
                  <div className="text-lg sm:text-2xl">üè¥‚Äç‚ò†Ô∏è</div>
                )}
                
                {/* Megaphone anim√© quand Sam parle */}
                {exercisesIsPlayingVocal && (
                  <div className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 rounded-full p-1 sm:p-2 shadow-lg animate-bounce">
                    <svg className="w-2 h-2 sm:w-4 sm:h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h3.763l7.79 3.894A1 1 0 0018 15V3zM14 8.59c0 1.2.8 2.27 2 2.27v.64c-1.77 0-3.2-1.4-3.2-3.14 0-1.74 1.43-3.14 3.2-3.14v.64c-1.2 0-2 1.07-2 2.27z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>

              {/* Bouton D√âMARRER avec Sam pour les exercices */}
              <button
                onClick={explainExercisesWithSam}
                disabled={exercisesIsPlayingVocal}
                className={`px-3 sm:px-6 py-2 sm:py-3 rounded-lg font-bold text-sm sm:text-lg shadow-lg transition-all ${
                  exercisesIsPlayingVocal
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:shadow-xl hover:scale-105'
                } ${!exercisesHasStarted && !exercisesIsPlayingVocal ? 'animate-pulse' : ''}`}
              >
                <Play className="w-3 h-3 sm:w-5 sm:h-5 inline-block mr-1 sm:mr-2" />
                {exercisesIsPlayingVocal ? 'Sam explique...' : 'D√âMARRER LES EXERCICES'}
              </button>
            </div>

            {/* Instructions pour les exercices */}
            <div className="bg-blue-50 border-2 border-blue-200 rounded-xl shadow-lg p-4 sm:p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <span className="text-2xl">üéØ</span>
                </div>
                <h2 className="text-xl sm:text-2xl font-bold text-blue-800">Comment bien r√©ussir tes exercices ?</h2>
              </div>
              
              <div className="space-y-3 text-sm sm:text-base text-blue-700">
                <div className="flex items-start gap-3">
                  <span className="text-lg">üìñ</span>
                  <p><strong>1. Lis bien l'histoire</strong> de chaque probl√®me pour comprendre la situation.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">üîç</span>
                  <p><strong>2. Trouve les deux nombres</strong> importants dans l'histoire √† additionner.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">‚úèÔ∏è</span>
                  <p><strong>3. Tape ta r√©ponse</strong> dans la case avec le point d'interrogation.</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-lg">‚ú®</span>
                  <p><strong>4. Si tu te trompes</strong>, Sam t'aidera avec une animation pour comprendre !</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-gray-800">
                  Exercice {currentExercise + 1} / {exercises.length}
                </h2>
                <div className="text-lg font-semibold text-blue-600">
                  Score : {score} / {exercises.length}
                </div>
              </div>

              {!showCompletionModal ? (
                <div className="space-y-6">
                  {/* Ic√¥ne visuelle */}
                  <div className="text-center">
                    <div className="text-6xl mb-4">{exercises[currentExercise].visual}</div>
                  </div>

                  {/* √ânonc√© du probl√®me */}
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="text-lg text-center text-gray-800 mb-4">{exercises[currentExercise].story}</div>
                    
                    {/* Bouton Lire l'√©nonc√© */}
                    <div className="text-center">
                      <button
                        id="read-story-button"
                        onClick={readCurrentStory}
                        className={`px-4 py-2 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 transition-all ${
                          highlightedElement === 'read-story-button' ? 'ring-4 ring-yellow-400 animate-pulse bg-yellow-500' : ''
                        }`}
                      >
                        üîä Lire l'√©nonc√©
                      </button>
                    </div>
                  </div>

                  {/* Zone de r√©ponse */}
                  <div className="text-center space-y-4">
                    <input
                      id="answer-input"
                      type="number"
                      value={userAnswer}
                      onChange={(e) => setUserAnswer(e.target.value)}
                      placeholder="?"
                      autoComplete="off"
                      autoCorrect="off"
                      autoCapitalize="off"
                      spellCheck="false"
                      className={`text-center text-xl font-bold border-2 border-gray-300 rounded-lg px-4 py-2 w-32 transition-all ${
                        highlightedElement === 'answer-input' ? 'ring-4 ring-yellow-400 animate-pulse border-yellow-500' : ''
                      }`}
                      onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
                    />
                    <div>
                      <button
                        id="validate-button"
                        onClick={checkAnswer}
                        disabled={!userAnswer}
                        className={`bg-blue-500 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-600 disabled:opacity-50 transition-all ${
                          highlightedElement === 'validate-button' ? 'ring-4 ring-yellow-400 animate-pulse bg-yellow-500' : ''
                        }`}
                      >
                        V√©rifier
                      </button>
                    </div>
                  </div>

                  {/* Animation de correction visuelle pour les r√©ponses incorrectes */}
                  {showExerciseAnimation && !isCorrect && (
                    <div className="bg-yellow-50 border-2 border-yellow-300 rounded-lg p-6 mb-4">
                      <h3 className="text-lg font-bold text-center mb-4 text-yellow-800">
                        üéØ Regardons ensemble la solution !
                      </h3>
                      
                      {(() => {
                        const exercise = exercises[currentExercise];
                        return (
                          <div className="space-y-4">
                            {/* √ânonc√© en surbrillance avec nombres mis en √©vidence */}
                            <div className="p-3 bg-blue-100 rounded-lg">
                              <div className="text-center font-semibold text-blue-800">
                                {exerciseAnimationStep === 'highlight-numbers' ? 
                                  highlightNumbers(exercise.story, true) : 
                                  exercise.story
                                }
                              </div>
                            </div>

                            {/* Explication de l'identification des nombres */}
                            {(exerciseAnimationStep === 'highlight-numbers' || exerciseAnimationStep === 'show-groups' || exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              <div className="text-center p-3 bg-yellow-100 rounded-lg">
                                <p className="text-lg text-yellow-800">
                                  üéØ Je trouve les nombres : <span className="font-bold text-blue-600">{exercise.first}</span> et <span className="font-bold text-green-600">{exercise.second}</span>
                                </p>
                              </div>
                            )}

                            {/* Animation des objets */}
                            {(exerciseAnimationStep === 'show-groups' || exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              <div className="flex justify-center items-center space-x-6">
                                {/* Premier groupe */}
                                <div className="p-3 rounded-lg bg-red-100 ring-2 ring-red-400">
                                  <div className="text-center mb-2">
                                    <span className="font-bold text-red-800">{exercise.first}</span>
                                  </div>
                                  <div className="grid grid-cols-3 gap-1">
                                    {Array.from({ length: Math.min(exercise.first, 9) }, (_, i) => (
                                      <div
                                        key={i}
                                        className={`text-2xl ${exercise.color1} animate-bounce`}
                                        style={{ animationDelay: `${i * 100}ms` }}
                                      >
                                        {exercise.item}
                                      </div>
                                    ))}
                                    {exercise.first > 9 && (
                                      <div className="text-sm text-gray-600 col-span-3 text-center">
                                        + {exercise.first - 9} autres...
                                      </div>
                                    )}
                                  </div>
                                </div>

                                <div className="text-3xl font-bold text-gray-700">+</div>

                                {/* Deuxi√®me groupe */}
                                <div className="p-3 rounded-lg bg-blue-100 ring-2 ring-blue-400">
                                  <div className="text-center mb-2">
                                    <span className="font-bold text-blue-800">{exercise.second}</span>
                                  </div>
                                  <div className="grid grid-cols-3 gap-1">
                                    {Array.from({ length: Math.min(exercise.second, 9) }, (_, i) => (
                                      <div
                                        key={i}
                                        className={`text-2xl ${exercise.color2} animate-bounce`}
                                        style={{ animationDelay: `${i * 100}ms` }}
                                      >
                                        {exercise.item}
                                      </div>
                                    ))}
                                    {exercise.second > 9 && (
                                      <div className="text-sm text-gray-600 col-span-3 text-center">
                                        + {exercise.second - 9} autres...
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                            )}

                            {/* Calcul √©crit */}
                            {(exerciseAnimationStep === 'show-calculation' || exerciseAnimationStep === 'show-result') && (
                              <div className="text-center p-4 bg-purple-100 rounded-lg">
                                <div className="text-2xl font-bold text-purple-800">
                                  {exerciseAnimationStep === 'show-result' ? 
                                    `${exercise.first} + ${exercise.second} = ${exercise.answer}` :
                                    `${exercise.first} + ${exercise.second} = ?`
                                  }
                                </div>
                              </div>
                            )}

                            {/* R√©sultat final */}
                            {exerciseAnimationStep === 'show-result' && (
                              <div className="text-center p-4 bg-green-100 rounded-lg ring-2 ring-green-400 animate-pulse">
                                <div className="text-3xl font-bold text-green-800 mb-2">
                                  {exercise.first} + {exercise.second} = {exercise.answer}
                                </div>
                                <div className="text-lg text-green-700">
                                  La r√©ponse est {exercise.answer} !
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })()}
                    </div>
                  )}

                  {/* Feedback */}
                  {isCorrect !== null && (
                    <div 
                      id="exercise-correction"
                      className={`p-4 rounded-lg text-center ${
                        isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                      <div className="flex items-center justify-center gap-2 mb-2">
                        {isCorrect ? (
                          <CheckCircle className="w-6 h-6" />
                        ) : (
                          <XCircle className="w-6 h-6" />
                        )}
                        <div className="text-2xl">{exercises[currentExercise].visual}</div>
                      </div>
                      <div className="mb-3">
                        <div className="font-bold">
                          {getPersonalizedFeedback(currentExercise, isCorrect)}
                        </div>
                      </div>
                      
                      <button
                        onClick={nextExercise}
                        className="bg-orange-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-orange-600 mt-2 transition-all"
                      >
                        {currentExercise < exercises.length - 1 ? 'Exercice suivant' : 'Voir mes r√©sultats'}
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                /* Modal de fin */
                <div className="text-center space-y-6">
                  <div className="text-6xl">üéâ</div>
                  <h2 className="text-3xl font-bold text-gray-800">
                    Exercices termin√©s !
                  </h2>
                  <div className="text-2xl font-bold text-blue-600">
                    Score : {score} / {exercises.length}
                  </div>
                  <div className="flex justify-center space-x-4">
                    <button
                      onClick={resetExercises}
                      className="bg-blue-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-600"
                    >
                      Recommencer
                    </button>
                    <button
                      onClick={() => setShowExercises(false)}
                      className="bg-orange-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-orange-600"
                    >
                      Retour au cours
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 