// =============================================
// SAUVEGARDE CODE SAM LE PIRATE - RECONNAISSANCE
// =============================================

// √âtats pour Sam le Pirate
const [exerciseStarted, setExerciseStarted] = useState(false);
const [showNextButton, setShowNextButton] = useState(false);
const [highlightNextButton, setHighlightNextButton] = useState(false);
const [isExplainingError, setIsExplainingError] = useState(false);
const [pirateIntroStarted, setPirateIntroStarted] = useState(false);
const [showExercisesList, setShowExercisesList] = useState(false);

// Expressions de pirate personnalis√©es pour chaque exercice incorrect
const pirateExpressions = [
  "Par ma barbe de pirate", // exercice 1
  "Humm √ßa n'est pas vraiment √ßa", // exercice 2  
  "Nom d'un alligator", // exercice 3
  "Saperlipopette", // exercice 4
  "Mille sabords", // exercice 5
  "Morbleu", // exercice 6
  "Tonnerre de Brest", // exercice 7
  "Par tous les diables des mers", // exercice 8
  "Sacr√© mille tonnerres", // exercice 9
  "Bigre et bigre" // exercice 10
];

// Compliments vari√©s pour les bonnes r√©ponses
const correctAnswerCompliments = [
  "Bravo",
  "Magnifique", 
  "Parfait",
  "√âpoustouflant",
  "Formidable",
  "Incroyable",
  "Fantastique",
  "G√©nial",
  "Excellent",
  "Superbe"
];

// Fonction pour rendre les tr√©sors de pirates - pi√®ces d'or jaunes !
const renderCircles = (number: string) => {
  const count = parseInt(number);
  console.log('renderPirateTreasures appel√© avec:', number, 'count:', count);
  
  if (!count || count > 20) {
    console.log('Retourne null pour count:', count);
    return null;
  }

  // Toujours des grosses pi√®ces d'or jaunes - simple et efficace !
  const getPirateObject = () => {
    return 'üü°'; // Pi√®ce d'or jaune pour tous les nombres
  };

  const treasures = [];
  
  // Un seul type d'objet pour toute l'illustration
  const pirateEmoji = getPirateObject();
  
  // Cr√©er le bon nombre de tr√©sors de pirates (tous identiques)
  for (let i = 1; i <= count; i++) {
    const isAnimated = animatingPoints.includes(i);
    
    treasures.push(
      <div
        key={i}
        className={`inline-block w-10 h-10 flex items-center justify-center text-2xl mx-1 my-1 transition-all duration-300 ${
          isAnimated ? 'ring-4 ring-yellow-400 bg-yellow-100 animate-bounce scale-125 rounded-lg' : ''
        }`}
      >
        {pirateEmoji}
      </div>
    );
  }
  
  console.log('Retourne', treasures.length, 'tr√©sors de pirates');
  return treasures;
};

// Fonction pour avoir le nom vocal de l'objet pirate
const getPirateObjectName = () => {
  return 'pi√®ces d\'or'; // Toujours des pi√®ces d'or !
};

// Fonction pour l'introduction vocale de Sam le Pirate
const startPirateIntro = async () => {
  if (stopSignalRef.current || pirateIntroStarted) return;
  
  console.log('üè¥‚Äç‚ò†Ô∏è D√©marrage introduction Sam le Pirate');
  setIsPlayingVocal(true);
  setPirateIntroStarted(true);
  
  try {
    await playAudio("Hey c'est Sam le Pirate, voici des exercices qui vont te permettre de t'entrainer.");
    if (stopSignalRef.current) return;
    
    await wait(800);
    if (stopSignalRef.current) return;
    
    await playAudio("et tu peux mettre ta r√©ponse dans la case r√©ponse");
    if (stopSignalRef.current) return;
    
    // Illuminer la case r√©ponse
    setHighlightedElement('answer-input');
    await wait(1500);
    setHighlightedElement(null);
    
    if (stopSignalRef.current) return;
    
    await playAudio("en avant toutes !");
    if (stopSignalRef.current) return;
    
    await wait(800);
    if (stopSignalRef.current) return;
    
    // Illuminer le bouton "√âcouter l'√©nonc√©"
    setHighlightedElement('listen-question-button');
    setShowExercisesList(true);
    
  } catch (error) {
    console.error('Erreur dans startPirateIntro:', error);
  } finally {
    setIsPlayingVocal(false);
  }
};

// Fonction pour commencer l'explication de l'exercice
const startExerciseExplanation = async () => {
  if (stopSignalRef.current || isExplainingError) return;
  
  console.log('üé§ D√©marrage explication exercice');
  setIsPlayingVocal(true);
  setExerciseStarted(true);
  
  try {
    // √ânonc√© de l'exercice
    await playAudio(exercises[currentExercise].question);
    if (stopSignalRef.current) return;
    
    await wait(500);
    if (stopSignalRef.current) return;
    
    // Illuminer la case r√©ponse
    setHighlightedElement('answer-input');
    await playAudio("√©crit ta r√©ponse √† cet endroit");
    if (stopSignalRef.current) return;
    
    await wait(1000);
    setHighlightedElement(null);
    
  } catch (error) {
    console.error('Erreur dans startExerciseExplanation:', error);
  } finally {
    setIsPlayingVocal(false);
  }
};

// Fonction pour animer l'explication d'une mauvaise r√©ponse
const explainWrongAnswer = async () => {
  if (stopSignalRef.current) return;
  
  console.log('‚ùå Explication mauvaise r√©ponse pour exercice', currentExercise + 1);
  setIsExplainingError(true);
  setIsPlayingVocal(true);
  
  try {
    // Expression de pirate personnalis√©e
    const pirateExpression = pirateExpressions[currentExercise] || "Mille sabords";
    await playAudio(pirateExpression + " !");
    if (stopSignalRef.current) return;
    
    await wait(800);
    if (stopSignalRef.current) return;
    
    await playAudio("Laisse-moi t'expliquer avec les pi√®ces d'or !");
    if (stopSignalRef.current) return;
    
    // Animation des tr√©sors pour compter
    const targetNumber = parseInt(exercises[currentExercise].correctAnswer);
    const pirateObjectName = getPirateObjectName();
    
    setAnimatingPoints([]);
    await wait(500);
    
    // Compter une par une
    for (let i = 1; i <= targetNumber; i ++) {
      if (stopSignalRef.current) return;
      
      setAnimatingPoints(prev => [...prev, i]);
      await playAudio(`${i}`);
      
      if (stopSignalRef.current) return;
      await wait(600);
    }
    
    if (stopSignalRef.current) return;
    
    await playAudio(`Et voil√† ! ${targetNumber} ${pirateObjectName} en tout !`);
    if (stopSignalRef.current) return;
    
    await wait(1000);
    if (stopSignalRef.current) return;
    
    // Bouton suivant
    setShowNextButton(true);
    setHighlightNextButton(true);
    
    await playAudio("appuie sur le bouton suivant pour passer au prochain exercice quand tu es pr√™t");
    if (stopSignalRef.current) return;
    
  } catch (error) {
    console.error('Erreur dans explainWrongAnswer:', error);
  } finally {
    setIsPlayingVocal(false);
    setIsExplainingError(false);
  }
};

// JSX pour l'introduction de Sam le Pirate dans les exercices
const SamPirateIntroJSX = () => (
  <div className="flex items-center justify-center gap-3 p-3">
    {/* Bouton Commencer avec image de Sam int√©gr√©e */}
    <div className="flex items-center gap-3">
      {/* Image de Sam le Pirate - pr√®s du bouton */}
      <div className={`relative flex-shrink-0 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 border-2 border-blue-200 shadow-md transition-all duration-300 ${
        isPlayingVocal ? 'w-32 h-32 scale-150' : 'w-24 h-24'
      }`}>
        <img 
          src="/image/pirate.png" 
          alt="Sam le Pirate" 
          className="w-full h-full rounded-full object-cover"
        />
        {/* Haut-parleur anim√© quand il parle */}
        {isPlayingVocal && (
          <div className="absolute -top-1 -right-1 bg-blue-500 text-white p-2 rounded-full animate-bounce shadow-lg">
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.77L4.916 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.916l3.467-2.77a1 1 0 011.617.77zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.983 5.983 0 01-1.757 4.243 1 1 0 01-1.415-1.414A3.983 3.983 0 0013 10a3.983 3.983 0 00-1.172-2.829 1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </div>
        )}
      </div>
      
      {/* Bouton R√©√©couter Sam - proche de l'image */}
      <button
        onClick={startPirateIntro}
        disabled={isPlayingVocal}
        className={`relative px-12 py-5 rounded-2xl font-black text-2xl transition-all duration-300 transform ${
          isPlayingVocal 
            ? 'bg-gradient-to-r from-gray-400 to-gray-500 text-gray-200 cursor-not-allowed animate-pulse shadow-md' 
            : pirateIntroStarted
              ? 'bg-gradient-to-r from-emerald-500 to-teal-600 text-white hover:from-emerald-600 hover:to-teal-700 hover:scale-105 shadow-xl hover:shadow-2xl border-2 border-emerald-300'
              : 'bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white hover:from-orange-600 hover:via-red-600 hover:to-pink-600 hover:scale-110 shadow-2xl hover:shadow-3xl animate-pulse border-4 border-yellow-300'
        } ${!isPlayingVocal && !pirateIntroStarted ? 'ring-4 ring-yellow-300 ring-opacity-75' : ''}`}
        style={{
          animationDuration: !isPlayingVocal && !pirateIntroStarted ? '1.5s' : '2s',
          animationIterationCount: isPlayingVocal || pirateIntroStarted ? 'none' : 'infinite',
          textShadow: '2px 2px 4px rgba(0,0,0,0.3)',
          boxShadow: !isPlayingVocal && !pirateIntroStarted 
            ? '0 10px 25px rgba(0,0,0,0.3), 0 0 30px rgba(255,215,0,0.4), inset 0 1px 0 rgba(255,255,255,0.2)' 
            : ''
        }}
      >
        {/* Effet de brillance */}
        {!isPlayingVocal && !pirateIntroStarted && (
          <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-transparent via-white to-transparent opacity-20 animate-pulse"></div>
        )}
        
        {/* Ic√¥nes et texte avec plus d'√©mojis */}
        <span className="relative z-10 flex items-center justify-center gap-2">
          {isPlayingVocal 
            ? <>üé§ <span className="animate-bounce">Sam parle...</span></> 
            : pirateIntroStarted 
              ? <>üîÑ <span>R√©√©couter Sam</span></> 
              : <>üöÄ <span className="animate-bounce">COMMENCER</span> ‚ú®</>
          }
        </span>
        
        {/* Particules brillantes pour le bouton commencer */}
        {!isPlayingVocal && !pirateIntroStarted && (
          <>
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-300 rounded-full animate-ping"></div>
            <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-pink-300 rounded-full animate-ping" style={{animationDelay: '0.5s'}}></div>
            <div className="absolute top-2 left-2 w-1 h-1 bg-white rounded-full animate-ping" style={{animationDelay: '1s'}}></div>
          </>
        )}
      </button>
    </div>
  </div>
);

// JSX pour le bouton "√âcouter l'√©nonc√©"
const ListenQuestionButtonJSX = () => (
  <button
    id="listen-question-button"
    onClick={startExerciseExplanation}
    disabled={isPlayingVocal}
    className={`px-8 py-4 rounded-xl font-bold text-xl transition-all shadow-lg ${
      highlightedElement === 'listen-question-button'
        ? 'bg-yellow-400 text-black ring-4 ring-yellow-300 animate-pulse scale-110 shadow-2xl'
        : isPlayingVocal
          ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
          : exerciseStarted
            ? 'bg-green-500 text-white hover:bg-green-600 hover:shadow-xl hover:scale-105'
            : 'bg-blue-500 text-white hover:bg-blue-600 hover:shadow-xl hover:scale-105'
    } disabled:opacity-50`}
  >
    {isPlayingVocal ? 'üé§ √ânonc√© en cours...' : exerciseStarted ? 'üîÑ R√©√©couter l\'√©nonc√©' : 'üé§ √âcouter l\'√©nonc√©'}
  </button>
);

// JSX pour le bouton Suivant illumin√©
const NextButtonJSX = () => (
  showNextButton && isCorrect === false && (
    <div className="flex justify-center">
      <button
        onClick={nextExercise}
        className={`px-8 py-4 rounded-lg font-bold text-lg transition-all ${
          highlightNextButton 
            ? 'bg-yellow-400 text-black ring-4 ring-yellow-300 animate-pulse scale-110 shadow-2xl' 
            : 'bg-blue-500 text-white hover:bg-blue-600'
        }`}
      >
        {highlightNextButton ? 'üëÜ Clique ici ! ‚Üí' : 'Suivant ‚Üí'}
      </button>
    </div>
  )
);

// =============================================
// FONCTIONS MODIFI√âES POUR SAM LE PIRATE
// =============================================

// handleAnswerSubmit modifi√©e avec compliments vari√©s et Sam le Pirate
const handleAnswerSubmit = async (answer: string) => {
  if (!answer.trim() || isPlayingVocal) return;
  
  // Arr√™ter toutes les animations quand on clique sur le champ r√©ponse
  stopAllVocalsAndAnimations();
  
  const correctAnswer = exercises[currentExercise].correctAnswer;
  const correct = answer === correctAnswer;
  
  setUserAnswer(answer);
  setIsCorrect(correct);
  
  if (correct && !answeredCorrectly.has(currentExercise)) {
    setScore(prevScore => prevScore + 1);
    setAnsweredCorrectly(prev => {
      const newSet = new Set(prev);
      newSet.add(currentExercise);
      return newSet;
    });
  }
  
  // R√©action vocale
  if (correct) {
    const randomCompliment = correctAnswerCompliments[Math.floor(Math.random() * correctAnswerCompliments.length)];
    await playAudio(randomCompliment + " !");
    
    // Passage automatique √† l'exercice suivant apr√®s 1.5s
    setTimeout(() => {
      if (currentExercise + 1 < exercises.length) {
        setCurrentExercise(currentExercise + 1);
        setUserAnswer('');
        setIsCorrect(null);
        setShowNextButton(false);
        setHighlightNextButton(false);
      } else {
        const finalScoreValue = score + (!answeredCorrectly.has(currentExercise) ? 1 : 0);
        setFinalScore(finalScoreValue);
        setShowCompletionModal(true);
        saveProgress(finalScoreValue, exercises.length);
      }
    }, 1500);
  } else {
    // Mauvaise r√©ponse ‚Üí explication avec Sam le Pirate
    setTimeout(() => {
      explainWrongAnswer();
    }, 500);
  }
};

// resetAll modifi√©e pour inclure les √©tats Sam le Pirate
const resetAll = () => {
  stopAllVocalsAndAnimations();
  setCurrentExercise(0);
  setUserAnswer('');
  setIsCorrect(null);
  setScore(0);
  setAnsweredCorrectly(new Set());
  setShowCompletionModal(false);
  setFinalScore(0);
  setExerciseStarted(false);
  setShowNextButton(false);
  setHighlightNextButton(false);
  setIsExplainingError(false);
  setPirateIntroStarted(false);
  setShowExercisesList(false);
};

// nextExercise modifi√©e pour r√©initialiser les boutons Sam le Pirate
const nextExercise = () => {
  stopAllVocalsAndAnimations();
  setShowNextButton(false);
  setHighlightNextButton(false);
  
  if (currentExercise < exercises.length - 1) {
    setCurrentExercise(currentExercise + 1);
    setUserAnswer('');
    setIsCorrect(null);
  } else {
    setFinalScore(score);
    setShowCompletionModal(true);
    saveProgress(score, exercises.length);
  }
};