# 🎮 PROMPT READMEANIM - Guide d'implémentation complète des animations et interactions

## 1. 💫 SURBRILLANCE PULSANTE DES BOUTONS INTERACTIFS

**Ajouter à tous les boutons d'interaction :**
```tsx
className="... pulse-interactive"
// ou selon couleur :
pulse-interactive-green
pulse-interactive-yellow  
pulse-interactive-gray
```

**CSS dans `app/globals.css` (déjà fait globalement) :**
```css
@keyframes pulseGlow {
  0%, 100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.3); }
  50% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.8); }
}
.pulse-interactive { animation: pulseGlow 2s ease-in-out infinite; }
```

## 2. 🎯 PERSONNAGE MINECRAFT + BOUTON DÉMARRER

**⚠️ IMPORTANT : Cette structure doit être intégrée dans CHAQUE section (Cours ET Exercices) :**
**Le personnage et le bouton DÉMARRER apparaissent à la fois dans l'onglet Cours ET dans l'onglet Exercices**
```tsx
{/* Personnage Minecraft avec bouton DÉMARRER */}
<div className="bg-gradient-to-r from-green-400 to-blue-500 rounded-xl p-6 shadow-lg mb-8">
  <div className="flex items-center justify-center gap-6 flex-wrap">
    <div className={`relative transition-all duration-500 border-4 border-green-300 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 shadow-lg ${
      isPlayingVocal
        ? 'w-20 sm:w-24 h-20 sm:h-24' // Quand il parle - plus gros
        : characterSizeExpanded
          ? 'w-16 sm:w-20 h-16 sm:h-20' // Après DÉMARRER - normal
          : 'w-12 sm:w-16 h-12 sm:h-16' // Initial - plus petit
    }`}>
      <img
        src="/image/Minecraftstyle.png"
        alt="Personnage Minecraft"
        className="w-full h-full rounded-full object-cover"
      />
      {/* Mégaphone quand il parle */}
      {isPlayingVocal && (
        <div className="absolute -top-1 -right-1 bg-red-500 text-white p-1 rounded-full shadow-lg">
          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.77L4.916 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.916l3.467-2.77a1 1 0 011.617.77zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.983 5.983 0 01-1.757 4.243 1 1 0 01-1.415-1.414A3.983 3.983 0 0013 10a3.983 3.983 0 00-1.172-2.829 1 1 0 010-1.414z" clipRule="evenodd" />
          </svg>
        </div>
      )}
    </div>
    
    <button
      onClick={() => {
        setHasStarted(true);
        setCharacterSizeExpanded(true);
        explainChapter();
      }}
      disabled={isPlayingVocal}
      className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-4 px-8 rounded-lg text-xl shadow-lg transition-all pulse-interactive-yellow disabled:opacity-50 flex items-center justify-center"
    >
      🚀 DÉMARRER
    </button>
  </div>
</div>
```

## 3. 🎛️ ÉTATS ET RÉFÉRENCES NÉCESSAIRES

```tsx
// États pour le système audio et animations
const [isPlayingVocal, setIsPlayingVocal] = useState(false);
const [hasStarted, setHasStarted] = useState(false);
const [characterSizeExpanded, setCharacterSizeExpanded] = useState(false);
const [highlightedElement, setHighlightedElement] = useState<string | null>(null);

// Refs pour contrôler les vocaux
const stopSignalRef = useRef(false);
const currentAudioRef = useRef<SpeechSynthesisUtterance | null>(null);
```

## 4. 🛑 FONCTIONS DE CONTRÔLE VOCAL

```tsx
// Fonction pour arrêter tous les vocaux et animations
const stopAllVocalsAndAnimations = () => {
  stopSignalRef.current = true;
  if (currentAudioRef.current) {
    speechSynthesis.cancel();
    currentAudioRef.current = null;
  }
  setIsPlayingVocal(false);
  setIsAnimating?.(false); // Si animation existe
  setHighlightedElement(null);
};

// Fonction pour jouer un audio avec voix Minecraft
const playAudio = (text: string): Promise<void> => {
  return new Promise((resolve) => {
    if (stopSignalRef.current) {
      resolve();
      return;
    }
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.rate = 0.9;    // Légèrement plus lent
    utterance.pitch = 1.1;   // Légèrement plus aigu
    utterance.lang = 'fr-FR';
    
    currentAudioRef.current = utterance;
    
    utterance.onend = () => {
      if (!stopSignalRef.current) {
        setIsPlayingVocal(false);
      }
      resolve();
    };
    
    utterance.onerror = () => {
      if (!stopSignalRef.current) {
        setIsPlayingVocal(false);
      }
      resolve();
    };
    
    setIsPlayingVocal(true);
    speechSynthesis.speak(utterance);
  });
};
```

## 5. 📍 FONCTIONS DE SCROLLING ET MISE EN ÉVIDENCE

```tsx
// Fonction pour scroller vers un élément
const scrollToElement = (elementId: string) => {
  const element = document.getElementById(elementId);
  if (element) {
    element.scrollIntoView({ 
      behavior: 'smooth', 
      block: 'center',
      inline: 'nearest'
    });
  }
};

// Fonction pour mettre en évidence un élément
const highlightElement = (elementId: string, duration: number = 3000) => {
  setHighlightedElement(elementId);
  setTimeout(() => {
    if (!stopSignalRef.current) {
      setHighlightedElement(null);
    }
  }, duration);
};

// Fonction pour faire clignoter plusieurs éléments un par un
const highlightElementsSequentially = async (elementIds: string[], delayBetween: number = 800) => {
  for (const elementId of elementIds) {
    if (stopSignalRef.current) break;
    setHighlightedElement(elementId);
    await new Promise(resolve => setTimeout(resolve, delayBetween));
  }
  if (!stopSignalRef.current) {
    setHighlightedElement(null);
  }
};
```

## 6. 🎤 STRUCTURE DU TUTORIEL AVEC SCROLLING

**Adapter le contenu selon la page :**
```tsx
const explainChapter = async () => {
  stopSignalRef.current = false;
  
  if (showExercises) {
    // TUTORIEL EXERCICES - ADAPTER LE CONTENU
    await playAudio("Salut petit mineur ! Bienvenue dans [CONTEXTE DE LA PAGE] !");
    if (stopSignalRef.current) return;
    await new Promise(resolve => setTimeout(resolve, 500));
    
    await playAudio("Objectif de ta quête : [OBJECTIF SPÉCIFIQUE] !");
    if (stopSignalRef.current) return;
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // PARCOURIR CHAQUE ÉLÉMENT DE LA PAGE :
    // 1. scrollToElement('id-element')
    // 2. await playAudio("Explication de cet élément...")
    // 3. highlightElement('id-element', durée) OU highlightElementsSequentially([ids])
    // 4. await new Promise(resolve => setTimeout(resolve, 500))
    
    // ⚠️ DÉTECTION DYNAMIQUE DES BOUTONS :
    // Pour les boutons qui changent (ex: Vérifier → Suivant), détecter leur état :
    // const buttonText = isCorrect === null ? 'Vérifier' : 'Suivant';
    // const buttonExplanation = isCorrect === null 
    //   ? "Le bouton Vérifier, c'est pour..." 
    //   : "Le bouton Suivant, c'est pour...";
    // await playAudio(`${buttonExplanation}...`);
    
  } else {
    // TUTORIEL COURS - ADAPTER LE CONTENU
    await playAudio("Salut petit crafteur ! Bienvenue dans [CONTEXTE DE LA PAGE] !");
    if (stopSignalRef.current) return;
    await new Promise(resolve => setTimeout(resolve, 500));
    
    await playAudio("Objectif : [OBJECTIF SPÉCIFIQUE] !");
    // ... même structure que pour exercices
  }
};
```

## 7. 🛑 BOUTON STOP FLOTTANT

```tsx
{/* Bouton STOP flottant global */}
{(isPlayingVocal || isAnimating) && (
  <button
    onClick={stopAllVocalsAndAnimations}
    className="fixed top-4 right-4 z-[60] bg-red-500 hover:bg-red-600 text-white p-3 rounded-full shadow-lg transition-all flex items-center gap-2"
  >
    <div className="w-8 h-8 relative">
      <img
        src="/image/Minecraftstyle.png"
        alt="Stop"
        className="w-full h-full rounded-full object-cover"
      />
    </div>
    <span className="font-bold text-sm">Stop</span>
    <div className="w-3 h-3 bg-white rounded animate-pulse"></div>
  </button>
)}
```

## 8. 🏷️ IDS À AJOUTER AUX ÉLÉMENTS

**Identifier tous les éléments interactifs de la page et leur donner des IDs uniques :**
- Navigation : `id="tab-navigation"`, `id="tab-cours"`, `id="tab-exercices"`
- Sections principales : `id="section-name"` 
- Boutons : `id="button-name"`, `id="btn-0"`, `id="btn-1"` (pour groupes)
- Zones d'affichage : `id="display-area"`, `id="result-zone"`
- Contrôles : `id="input-field"`, `id="score-display"`

**Règle : chaque élément mentionné dans le tutoriel DOIT avoir un ID unique**

## 9. 🎨 CLASSES DE MISE EN ÉVIDENCE CONDITIONNELLE

**Ajouter à chaque élément avec ID :**
```tsx
className={`... ${highlightedElement === 'element-id' ? 'ring-4 ring-yellow-400 bg-yellow-200 scale-110 animate-pulse' : ''}`}

// Pour les éléments avec texte :
className={`... ${highlightedElement === 'element-id' ? 'ring-4 ring-yellow-400 bg-yellow-200 scale-110 animate-pulse p-2 rounded-lg' : ''}`}
```

## 10. ✅ CONDITIONS D'ACTIVATION DES BOUTONS

**Tous les boutons interactifs doivent avoir :**
```tsx
disabled={isPlayingVocal}
onClick={() => {
  // Action + éventuellement stopAllVocalsAndAnimations() si nécessaire
}}
```

## 11. 📍 SCROLL AUTOMATIQUE VERS LES ANIMATIONS

**⚠️ RÈGLE IMPORTANTE : Tout bouton qui déclenche une animation doit scroller automatiquement vers cette animation**

**Exemple pour les boutons de sélection :**
```tsx
onClick={() => {
  setSelectedValue(value);
  // Scroll automatique vers l'animation après mise à jour
  setTimeout(() => scrollToElement('animation-section'), 100);
}}
```

**Exemple pour d'autres boutons d'action :**
```tsx
onClick={() => {
  performAction();
  // Scroll vers la zone d'animation/résultat
  setTimeout(() => scrollToElement('result-section'), 100);
}}
```

**Règles :**
- Toujours utiliser `setTimeout` pour laisser le temps au state de se mettre à jour
- Délai recommandé : 100ms (assez court pour être fluide, assez long pour la mise à jour)
- Cibler la section d'animation principale de la page
- S'applique à TOUS les boutons qui modifient le contenu animé

## 12. 🔄 USEEFFECT POUR ARRÊT AUTO

**Si la page a des onglets ou changements de vue :**
```tsx
useEffect(() => {
  stopAllVocalsAndAnimations();
}, [showExercises, currentSection, /* autres états de navigation */]);
```

---

**📝 NOTES D'ADAPTATION :**
- Remplacer `[CONTEXTE DE LA PAGE]` par le sujet spécifique (ex: "l'atelier des nombres", "l'arène des fractions")
- Remplacer `[OBJECTIF SPÉCIFIQUE]` par l'objectif pédagogique
- Adapter les IDs selon les éléments réels de la page
- Adapter les textes du tutoriel selon les fonctionnalités disponibles
- Respecter l'ordre logique d'utilisation de la page dans le tutoriel
- **⚠️ IMPORTANT** : Pour les exercices, toujours détecter dynamiquement le texte des boutons qui changent (ex: "Vérifier" → "Suivant") et adapter l'explication en conséquence